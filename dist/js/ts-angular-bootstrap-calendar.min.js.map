{"version":3,"sources":["services/moment.js","services/calendarHelper.js","ts-angular-bootstrap-calendar.js","services/calendarConfig.js","filters/truncateEventTitle.js","filters/eventCountBadgeTotal.js","directives/mwlCollapseFallback.js","directives/mwlCalendarYear.js","directives/mwlCalendarWeek.js","directives/mwlCalendarSlideBox.js","directives/mwlCalendarMonth.js","directives/mwlCalendarDay.js","directives/mwlCalendar.js"],"names":["window","angular","module","constant","moment","startOf","calendarConfig","isISOWeekBasedOnLocale","day","isISOWeek","getEventsInPeriod","userValue","startPeriod","calendarDate","period","allEvents","getMonthNames","months","endOf","filter","event","push","i","dateFormats","month","self","this","weekdays","getWeekDayNames","startDay","useISOWeek","format","short","eventStart","eventIsInPeriod","eventEnd","Date","weekDay","periodEnd","periodStart","eventsInPeriod","isAfter","isBefore","isSame","getYearView","events","currentDay","grid","row","monthIndex","isToday","endPeriod","starts_at","subtract","ends_at","date","dateOffset","numberOfDaysInMonth","getMonthView","getWeekDayIndex","startOfMonth","weekdayIndex","eventsWithIds","index","buildRow","map","prefillMonth","clone","isFuture","inMonth","isPast","isWeekend","label","indexOf","postfillMonth","add","getWeekView","Array","columns","currentWeekDayIndex","beginningOfWeek","weekDays","getDay","toDate","endOfWeek","eventsSorted","weekViewStart","offset","span","diff","weekViewEnd","daySpan","dayOffset","calendarStart","calendarEnd","getDayView","dayStartHour","dayEndHour","dayHeight","calendarHeight","dayHeightMultiplier","buckets","top","height","diffStart","forEach","bucket","canFitInThisBucket","cannotFitInABucket","view","bucketIndex","bucketItem","left","length","toggleEventBreakdown","openEvents","isOpened","rowIndex","cellIndex","closeAllOpenItems","isCellOpened","provider","defaultTitleFormats","week","year","configProvider","formats","extend","defaultDateFormats","titleFormats","$get","string","boxHeight","substr","directive","incrementsBadgeTotal","controller","$injector","has","restrict","$scope","$attrs","$element","unbindWatcher","$watch","mwlCollapseFallback","shouldCollapse","unbindDestroy","addClass","removeClass","$on","require","templateUrl","eventClick","eventEditClick","eventDeleteClick","scope","deleteEventHtml","autoOpen","timespanClick","editEventHtml","$sce","$timeout","calendarHelper","eventCountBadgeTotalFilter","updateView","monthClicked","firstRun","handler","monthClickedFirstRun","drillDown","yearIndex","calendarCtrl","element","link","attrs","useIsoWeek","changeView","replace","isOpen","elm","ctrls","isMonthView","isYearView","dayClicked","dayClickedFirstRun","highlightEvent","highlightClass","dayContainsEvent","shouldAddClass","e","$id","type","eventLabel","timeLabel","dayViewEnd","dayViewSplit","dayViewStart","dayCounter","hours","parseInt","days","hour","weekTitleLabel","titleFunctions","newDay","control","getTitle","next","firstRunWatcher","locale","originalView","copy","unbindDestroyListener"],"mappings":"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","file":"ts-angular-bootstrap-calendar.min.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc service\n * @name angularBootstrapCalendarApp.moment\n * @description\n * # moment\n * Constant in the angularBootstrapCalendarApp.\n */\nangular.module('mwl.calendar')\n  .constant('moment', window.moment);\n","'use strict';\n\n/**\n * @ngdoc service\n * @name angularBootstrapCalendarApp.calendarHelper\n * @description\n * # calendarHelper\n * Service in the angularBootstrapCalendarApp.\n */\nangular.module('mwl.calendar')\n  .service('calendarHelper', function (moment, calendarConfig) {\n\n    var self = this;\n\n    function isISOWeekBasedOnLocale() {\n      return moment().startOf('week').day() === 1;\n    }\n\n    function isISOWeek(userValue) {\n      //If a manual override has been set in the directive, use that\n      if (angular.isDefined(userValue)) {\n        return userValue;\n      }\n      //Otherwise fallback to the locale\n      return isISOWeekBasedOnLocale();\n    }\n\n    function getEventsInPeriod(calendarDate, period, allEvents) {\n      var startPeriod = moment(calendarDate).startOf(period);\n      var endPeriod = moment(calendarDate).endOf(period);\n      return allEvents.filter(function(event) {\n        return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n      });\n    }\n\n    this.getMonthNames = function() {\n\n      var months = [];\n      for (var i = 0; i <= 11; i++) {\n        months.push(moment(new Date(2014, i)).format(calendarConfig.dateFormats.month));\n      }\n\n      return months;\n\n    };\n\n    this.getWeekDayNames = function(short, useISOWeek) {\n\n      var weekdays = [];\n      var startDay = isISOWeek(useISOWeek) ? 22 : 21;\n      for (var i = 0; i <= 6; i++) {\n        weekdays.push(moment(new Date(2014, 8, startDay + i)).format(calendarConfig.dateFormats.weekDay));\n      }\n\n      return weekdays;\n\n    };\n\n    this.eventIsInPeriod = function(eventStart, eventEnd, periodStart, periodEnd) {\n\n      eventStart = moment(eventStart);\n      eventEnd = moment(eventEnd);\n      periodStart = moment(periodStart);\n      periodEnd = moment(periodEnd);\n\n      return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n        (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n        (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n        eventStart.isSame(periodStart) ||\n        eventEnd.isSame(periodEnd);\n\n    };\n\n    this.getYearView = function(events, currentDay) {\n\n      var grid = [];\n      var months = self.getMonthNames();\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n\n      for (var i = 0; i < 3; i++) {\n        var row = [];\n        for (var j = 0; j < 4; j++) {\n          var monthIndex = 12 - months.length;\n          var startPeriod = new Date(moment(currentDay).format('YYYY'), monthIndex, 1);\n          var endPeriod = moment(startPeriod).add(1, 'month').subtract(1, 'second').toDate();\n\n          row.push({\n            label: months.shift(),\n            monthIndex: monthIndex,\n            isToday: moment(startPeriod).startOf('month').isSame(moment().startOf('month')),\n            events: eventsInPeriod.filter(function(event) {\n              return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n            }),\n            date: moment(startPeriod).startOf('month')\n          });\n        }\n        grid.push(row);\n      }\n\n      return grid;\n\n    };\n\n    this.getMonthView = function(events, currentDay, useISOWeek) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n\n      var dateOffset = isISOWeek(useISOWeek) ? 1 : 0;\n\n      var startOfMonth = moment(currentDay).startOf('month');\n      var numberOfDaysInMonth = moment(currentDay).endOf('month').date();\n\n      var grid = [];\n      var buildRow = new Array(7);\n      var eventsWithIds = eventsInPeriod.map(function(event, index) {\n        event.$id = index;\n        return event;\n      });\n\n      function getWeekDayIndex() {\n        var day = startOfMonth.day() - dateOffset;\n        if (day < 0) {\n          day = 6;\n        }\n        return day;\n      }\n\n      for (var i = 1; i <= numberOfDaysInMonth; i++) {\n\n        if (i === 1) {\n          var weekdayIndex = getWeekDayIndex(startOfMonth);\n          var prefillMonth = startOfMonth.clone();\n          while (weekdayIndex > 0) {\n            weekdayIndex--;\n            prefillMonth = prefillMonth.subtract(1, 'day');\n            buildRow[weekdayIndex] = {\n              label: prefillMonth.date(),\n              date: prefillMonth.clone(),\n              inMonth: false,\n              isPast: moment().startOf('day').isAfter(prefillMonth),\n              isToday: moment().startOf('day').isSame(prefillMonth),\n              isFuture: moment().startOf('day').isBefore(prefillMonth),\n              events: []\n            };\n          }\n        }\n\n        buildRow[getWeekDayIndex(startOfMonth)] = {\n          label: startOfMonth.date(),\n          inMonth: true,\n          isPast: moment().startOf('day').isAfter(startOfMonth),\n          isToday: moment().startOf('day').isSame(startOfMonth),\n          isFuture: moment().startOf('day').isBefore(startOfMonth),\n          isWeekend: [0, 6].indexOf(moment(startOfMonth).day()) > -1,\n          date: startOfMonth.clone(),\n          events: eventsWithIds.filter(function(event) {\n            return self.eventIsInPeriod(event.starts_at, event.ends_at, startOfMonth.clone().startOf('day'), startOfMonth.clone().endOf('day'));\n          })\n        };\n\n        if (i === numberOfDaysInMonth) {\n          weekdayIndex = getWeekDayIndex(startOfMonth);\n          var postfillMonth = startOfMonth.clone();\n          while (weekdayIndex < 6) {\n            weekdayIndex++;\n            postfillMonth = postfillMonth.add(1, 'day');\n            buildRow[weekdayIndex] = {\n              label: postfillMonth.date(),\n              date: postfillMonth.clone(),\n              inMonth: false,\n              isPast: moment().startOf('day').isAfter(postfillMonth),\n              isToday: moment().startOf('day').isSame(postfillMonth),\n              isFuture: moment().startOf('day').isBefore(postfillMonth),\n              events: []\n            };\n          }\n        }\n\n        if (getWeekDayIndex(startOfMonth) === 6 || i === numberOfDaysInMonth) {\n          grid.push(buildRow);\n          buildRow = new Array(7);\n        }\n\n        startOfMonth = startOfMonth.add(1, 'day');\n\n      }\n\n      return grid;\n\n    };\n\n    this.getWeekView = function(events, currentDay, useISOWeek) {\n\n      var dateOffset = isISOWeek(useISOWeek) ? 1 : 0;\n      var columns = new Array(7);\n      var weekDays = self.getWeekDayNames(false, useISOWeek);\n      var currentWeekDayIndex = currentDay.getDay();\n      var beginningOfWeek, endOfWeek, i, date;\n\n      for (i = currentWeekDayIndex; i >= 0; i--) {\n        date = moment(currentDay).subtract(currentWeekDayIndex - i, 'days').add(dateOffset, 'day').toDate();\n        columns[i] = {\n          weekDay: weekDays[i],\n          day: moment(date).format('D'),\n          date: moment(date).format(calendarConfig.dateFormats.day),\n          isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n          isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n          isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n          isWeekend: [0, 6].indexOf(moment(date).day()) > -1\n        };\n        if (i === 0) {\n          beginningOfWeek = date;\n        } else if (i === 6) {\n          endOfWeek = date;\n        }\n      }\n\n      for (i = currentWeekDayIndex + 1; i < 7; i++) {\n        date = moment(currentDay).add(i - currentWeekDayIndex, 'days').add(dateOffset, 'day').toDate();\n        columns[i] = {\n          weekDay: weekDays[i],\n          day: moment(date).format('D'),\n          date: moment(date).format(calendarConfig.dateFormats.day),\n          isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n          isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n          isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n          isWeekend: [0, 6].indexOf(moment(date).day()) > -1\n        };\n        if (i === 0) {\n          beginningOfWeek = date;\n        } else if (i === 6) {\n          endOfWeek = date;\n        }\n      }\n\n      endOfWeek = moment(endOfWeek).endOf('day').toDate();\n      beginningOfWeek = moment(beginningOfWeek).startOf('day').toDate();\n\n      var eventsSorted = events.filter(function(event) {\n        return self.eventIsInPeriod(event.starts_at, event.ends_at, beginningOfWeek, endOfWeek);\n      }).map(function(event) {\n\n        var eventStart = moment(event.starts_at).startOf('day');\n        var eventEnd = moment(event.ends_at).startOf('day');\n        var weekViewStart = moment(beginningOfWeek).startOf('day');\n        var weekViewEnd = moment(endOfWeek).startOf('day');\n\n        var offset, span;\n\n        if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n          offset = 0;\n        } else {\n          offset = eventStart.diff(weekViewStart, 'days');\n        }\n\n        if (eventEnd.isAfter(weekViewEnd)) {\n          eventEnd = weekViewEnd;\n        }\n\n        if (eventStart.isBefore(weekViewStart)) {\n          eventStart = weekViewStart;\n        }\n\n        span = moment(eventEnd).diff(eventStart, 'days') + 1;\n\n        event.daySpan = span;\n        event.dayOffset = offset;\n        return event;\n      });\n\n      return {columns: columns, events: eventsSorted};\n\n    };\n\n    this.getDayView = function(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n      var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n      var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n      var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n      var dayHeightMultiplier = dayHeight / 60;\n      var buckets = [];\n\n      return eventsInPeriod.filter(function(event) {\n        return self.eventIsInPeriod(event.starts_at, event.ends_at, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n      }).map(function(event) {\n        if (moment(event.starts_at).isBefore(calendarStart)) {\n          event.top = 0;\n        } else {\n          event.top = (moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier) - 2;\n        }\n\n        if (moment(event.ends_at).isAfter(calendarEnd)) {\n          event.height = calendarHeight - event.top;\n        } else {\n          var diffStart = event.starts_at;\n          if (moment(event.starts_at).isBefore(calendarStart)) {\n            diffStart = calendarStart.toDate();\n          }\n          event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n        }\n\n        if (event.top - event.height > calendarHeight) {\n          event.height = 0;\n        }\n\n        event.left = 0;\n\n        return event;\n      }).filter(function(event) {\n        return event.height > 0;\n      }).map(function(event) {\n\n        var cannotFitInABucket = true;\n        buckets.forEach(function(bucket, bucketIndex) {\n          var canFitInThisBucket = true;\n\n          bucket.forEach(function(bucketItem) {\n            if (self.eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) || self.eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n              canFitInThisBucket = false;\n            }\n          });\n\n          if (canFitInThisBucket && cannotFitInABucket) {\n            cannotFitInABucket = false;\n            event.left = bucketIndex * 150;\n            buckets[bucketIndex].push(event);\n          }\n\n        });\n\n        if (cannotFitInABucket) {\n          event.left = buckets.length * 150;\n          buckets.push([event]);\n        }\n\n        return event;\n\n      });\n\n    };\n\n    this.toggleEventBreakdown = function(view, rowIndex, cellIndex) {\n\n      var openEvents = [];\n\n      function closeAllOpenItems() {\n        view = view.map(function(row) {\n          row.isOpened = false;\n          return row.map(function(cell) {\n            cell.isOpened = false;\n            return cell;\n          });\n        });\n      }\n\n      if (view[rowIndex][cellIndex].events.length > 0) {\n\n        var isCellOpened = view[rowIndex][cellIndex].isOpened;\n\n        closeAllOpenItems();\n\n        view[rowIndex][cellIndex].isOpened = !isCellOpened;\n        view[rowIndex].isOpened = !isCellOpened;\n        openEvents = view[rowIndex][cellIndex].events;\n      } else {\n        closeAllOpenItems();\n      }\n\n      return {view: view, openEvents: openEvents};\n\n    };\n\n  });\n","/**\n * ts-angular-bootstrap-calendar - A pure AngularJS bootstrap themed responsive calendar that can display events and has views for year, month, week and day. Modified for use by Teachscape.\n * @version v0.1.1\n * @link https://github.com/el-besto/ts-angular-bootstrap-calendar\n * @license MIT\n */\n(function (window, angular) {\n    'use strict';\n    angular.module('mwl.calendar', []);\n    'use strict';\n    /**\n * @ngdoc service\n * @name angularBootstrapCalendarApp.moment\n * @description\n * # moment\n * Constant in the angularBootstrapCalendarApp.\n */\n    angular.module('mwl.calendar').constant('moment', window.moment);\n    'use strict';\n    /**\n * @ngdoc service\n * @name angularBootstrapCalendarApp.calendarHelper\n * @description\n * # calendarHelper\n * Service in the angularBootstrapCalendarApp.\n */\n    angular.module('mwl.calendar').service('calendarHelper', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            var self = this;\n            function isISOWeekBasedOnLocale() {\n                return moment().startOf('week').day() === 1;\n            }\n            function isISOWeek(userValue) {\n                //If a manual override has been set in the directive, use that\n                if (angular.isDefined(userValue)) {\n                    return userValue;\n                }\n                //Otherwise fallback to the locale\n                return isISOWeekBasedOnLocale();\n            }\n            function getEventsInPeriod(calendarDate, period, allEvents) {\n                var startPeriod = moment(calendarDate).startOf(period);\n                var endPeriod = moment(calendarDate).endOf(period);\n                return allEvents.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                });\n            }\n            this.getMonthNames = function () {\n                var months = [];\n                for (var i = 0; i <= 11; i++) {\n                    months.push(moment(new Date(2014, i)).format(calendarConfig.dateFormats.month));\n                }\n                return months;\n            };\n            this.getWeekDayNames = function (short, useISOWeek) {\n                var weekdays = [];\n                var startDay = isISOWeek(useISOWeek) ? 22 : 21;\n                for (var i = 0; i <= 6; i++) {\n                    weekdays.push(moment(new Date(2014, 8, startDay + i)).format(calendarConfig.dateFormats.weekDay));\n                }\n                return weekdays;\n            };\n            this.eventIsInPeriod = function (eventStart, eventEnd, periodStart, periodEnd) {\n                eventStart = moment(eventStart);\n                eventEnd = moment(eventEnd);\n                periodStart = moment(periodStart);\n                periodEnd = moment(periodEnd);\n                return eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd) || eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd) || eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd) || eventStart.isSame(periodStart) || eventEnd.isSame(periodEnd);\n            };\n            this.getYearView = function (events, currentDay) {\n                var grid = [];\n                var months = self.getMonthNames();\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n                for (var i = 0; i < 3; i++) {\n                    var row = [];\n                    for (var j = 0; j < 4; j++) {\n                        var monthIndex = 12 - months.length;\n                        var startPeriod = new Date(moment(currentDay).format('YYYY'), monthIndex, 1);\n                        var endPeriod = moment(startPeriod).add(1, 'month').subtract(1, 'second').toDate();\n                        row.push({\n                            label: months.shift(),\n                            monthIndex: monthIndex,\n                            isToday: moment(startPeriod).startOf('month').isSame(moment().startOf('month')),\n                            events: eventsInPeriod.filter(function (event) {\n                                return self.eventIsInPeriod(event.starts_at, event.ends_at, startPeriod, endPeriod);\n                            }),\n                            date: moment(startPeriod).startOf('month')\n                        });\n                    }\n                    grid.push(row);\n                }\n                return grid;\n            };\n            this.getMonthView = function (events, currentDay, useISOWeek) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n                var dateOffset = isISOWeek(useISOWeek) ? 1 : 0;\n                var startOfMonth = moment(currentDay).startOf('month');\n                var numberOfDaysInMonth = moment(currentDay).endOf('month').date();\n                var grid = [];\n                var buildRow = new Array(7);\n                var eventsWithIds = eventsInPeriod.map(function (event, index) {\n                    event.$id = index;\n                    return event;\n                });\n                function getWeekDayIndex() {\n                    var day = startOfMonth.day() - dateOffset;\n                    if (day < 0) {\n                        day = 6;\n                    }\n                    return day;\n                }\n                for (var i = 1; i <= numberOfDaysInMonth; i++) {\n                    if (i === 1) {\n                        var weekdayIndex = getWeekDayIndex(startOfMonth);\n                        var prefillMonth = startOfMonth.clone();\n                        while (weekdayIndex > 0) {\n                            weekdayIndex--;\n                            prefillMonth = prefillMonth.subtract(1, 'day');\n                            buildRow[weekdayIndex] = {\n                                label: prefillMonth.date(),\n                                date: prefillMonth.clone(),\n                                inMonth: false,\n                                isPast: moment().startOf('day').isAfter(prefillMonth),\n                                isToday: moment().startOf('day').isSame(prefillMonth),\n                                isFuture: moment().startOf('day').isBefore(prefillMonth),\n                                events: []\n                            };\n                        }\n                    }\n                    buildRow[getWeekDayIndex(startOfMonth)] = {\n                        label: startOfMonth.date(),\n                        inMonth: true,\n                        isPast: moment().startOf('day').isAfter(startOfMonth),\n                        isToday: moment().startOf('day').isSame(startOfMonth),\n                        isFuture: moment().startOf('day').isBefore(startOfMonth),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(moment(startOfMonth).day()) > -1,\n                        date: startOfMonth.clone(),\n                        events: eventsWithIds.filter(function (event) {\n                            return self.eventIsInPeriod(event.starts_at, event.ends_at, startOfMonth.clone().startOf('day'), startOfMonth.clone().endOf('day'));\n                        })\n                    };\n                    if (i === numberOfDaysInMonth) {\n                        weekdayIndex = getWeekDayIndex(startOfMonth);\n                        var postfillMonth = startOfMonth.clone();\n                        while (weekdayIndex < 6) {\n                            weekdayIndex++;\n                            postfillMonth = postfillMonth.add(1, 'day');\n                            buildRow[weekdayIndex] = {\n                                label: postfillMonth.date(),\n                                date: postfillMonth.clone(),\n                                inMonth: false,\n                                isPast: moment().startOf('day').isAfter(postfillMonth),\n                                isToday: moment().startOf('day').isSame(postfillMonth),\n                                isFuture: moment().startOf('day').isBefore(postfillMonth),\n                                events: []\n                            };\n                        }\n                    }\n                    if (getWeekDayIndex(startOfMonth) === 6 || i === numberOfDaysInMonth) {\n                        grid.push(buildRow);\n                        buildRow = new Array(7);\n                    }\n                    startOfMonth = startOfMonth.add(1, 'day');\n                }\n                return grid;\n            };\n            this.getWeekView = function (events, currentDay, useISOWeek) {\n                var dateOffset = isISOWeek(useISOWeek) ? 1 : 0;\n                var columns = new Array(7);\n                var weekDays = self.getWeekDayNames(false, useISOWeek);\n                var currentWeekDayIndex = currentDay.getDay();\n                var beginningOfWeek, endOfWeek, i, date;\n                for (i = currentWeekDayIndex; i >= 0; i--) {\n                    date = moment(currentDay).subtract(currentWeekDayIndex - i, 'days').add(dateOffset, 'day').toDate();\n                    columns[i] = {\n                        weekDay: weekDays[i],\n                        day: moment(date).format('D'),\n                        date: moment(date).format(calendarConfig.dateFormats.day),\n                        isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n                        isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n                        isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(moment(date).day()) > -1\n                    };\n                    if (i === 0) {\n                        beginningOfWeek = date;\n                    } else if (i === 6) {\n                        endOfWeek = date;\n                    }\n                }\n                for (i = currentWeekDayIndex + 1; i < 7; i++) {\n                    date = moment(currentDay).add(i - currentWeekDayIndex, 'days').add(dateOffset, 'day').toDate();\n                    columns[i] = {\n                        weekDay: weekDays[i],\n                        day: moment(date).format('D'),\n                        date: moment(date).format(calendarConfig.dateFormats.day),\n                        isPast: moment(date).startOf('day').isBefore(moment().startOf('day')),\n                        isToday: moment(date).startOf('day').isSame(moment().startOf('day')),\n                        isFuture: moment(date).startOf('day').isAfter(moment().startOf('day')),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(moment(date).day()) > -1\n                    };\n                    if (i === 0) {\n                        beginningOfWeek = date;\n                    } else if (i === 6) {\n                        endOfWeek = date;\n                    }\n                }\n                endOfWeek = moment(endOfWeek).endOf('day').toDate();\n                beginningOfWeek = moment(beginningOfWeek).startOf('day').toDate();\n                var eventsSorted = events.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, beginningOfWeek, endOfWeek);\n                }).map(function (event) {\n                    var eventStart = moment(event.starts_at).startOf('day');\n                    var eventEnd = moment(event.ends_at).startOf('day');\n                    var weekViewStart = moment(beginningOfWeek).startOf('day');\n                    var weekViewEnd = moment(endOfWeek).startOf('day');\n                    var offset, span;\n                    if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n                        offset = 0;\n                    } else {\n                        offset = eventStart.diff(weekViewStart, 'days');\n                    }\n                    if (eventEnd.isAfter(weekViewEnd)) {\n                        eventEnd = weekViewEnd;\n                    }\n                    if (eventStart.isBefore(weekViewStart)) {\n                        eventStart = weekViewStart;\n                    }\n                    span = moment(eventEnd).diff(eventStart, 'days') + 1;\n                    event.daySpan = span;\n                    event.dayOffset = offset;\n                    return event;\n                });\n                return {\n                    columns: columns,\n                    events: eventsSorted\n                };\n            };\n            this.getDayView = function (events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n                var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n                var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n                var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n                var dayHeightMultiplier = dayHeight / 60;\n                var buckets = [];\n                return eventsInPeriod.filter(function (event) {\n                    return self.eventIsInPeriod(event.starts_at, event.ends_at, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n                }).map(function (event) {\n                    if (moment(event.starts_at).isBefore(calendarStart)) {\n                        event.top = 0;\n                    } else {\n                        event.top = moment(event.starts_at).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier - 2;\n                    }\n                    if (moment(event.ends_at).isAfter(calendarEnd)) {\n                        event.height = calendarHeight - event.top;\n                    } else {\n                        var diffStart = event.starts_at;\n                        if (moment(event.starts_at).isBefore(calendarStart)) {\n                            diffStart = calendarStart.toDate();\n                        }\n                        event.height = moment(event.ends_at).diff(diffStart, 'minutes') * dayHeightMultiplier;\n                    }\n                    if (event.top - event.height > calendarHeight) {\n                        event.height = 0;\n                    }\n                    event.left = 0;\n                    return event;\n                }).filter(function (event) {\n                    return event.height > 0;\n                }).map(function (event) {\n                    var cannotFitInABucket = true;\n                    buckets.forEach(function (bucket, bucketIndex) {\n                        var canFitInThisBucket = true;\n                        bucket.forEach(function (bucketItem) {\n                            if (self.eventIsInPeriod(event.starts_at, event.ends_at, bucketItem.starts_at, bucketItem.ends_at) || self.eventIsInPeriod(bucketItem.starts_at, bucketItem.ends_at, event.starts_at, event.ends_at)) {\n                                canFitInThisBucket = false;\n                            }\n                        });\n                        if (canFitInThisBucket && cannotFitInABucket) {\n                            cannotFitInABucket = false;\n                            event.left = bucketIndex * 150;\n                            buckets[bucketIndex].push(event);\n                        }\n                    });\n                    if (cannotFitInABucket) {\n                        event.left = buckets.length * 150;\n                        buckets.push([event]);\n                    }\n                    return event;\n                });\n            };\n            this.toggleEventBreakdown = function (view, rowIndex, cellIndex) {\n                var openEvents = [];\n                function closeAllOpenItems() {\n                    view = view.map(function (row) {\n                        row.isOpened = false;\n                        return row.map(function (cell) {\n                            cell.isOpened = false;\n                            return cell;\n                        });\n                    });\n                }\n                if (view[rowIndex][cellIndex].events.length > 0) {\n                    var isCellOpened = view[rowIndex][cellIndex].isOpened;\n                    closeAllOpenItems();\n                    view[rowIndex][cellIndex].isOpened = !isCellOpened;\n                    view[rowIndex].isOpened = !isCellOpened;\n                    openEvents = view[rowIndex][cellIndex].events;\n                } else {\n                    closeAllOpenItems();\n                }\n                return {\n                    view: view,\n                    openEvents: openEvents\n                };\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').provider('calendarConfig', function () {\n        var defaultDateFormats = {\n            hour: 'ha',\n            day: 'D MMM',\n            month: 'MMMM',\n            weekDay: 'dddd'\n        };\n        var defaultTitleFormats = {\n            day: 'dddd D MMMM, YYYY',\n            week: 'Week {week} of {year}',\n            month: 'MMMM YYYY',\n            year: 'YYYY'\n        };\n        var configProvider = this;\n        configProvider.configureDateFormats = function (formats) {\n            angular.extend(defaultDateFormats, formats);\n            return configProvider;\n        };\n        configProvider.configureTitleFormats = function (formats) {\n            angular.extend(defaultTitleFormats, formats);\n            return configProvider;\n        };\n        configProvider.$get = function () {\n            return {\n                dateFormats: defaultDateFormats,\n                titleFormats: defaultTitleFormats\n            };\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('truncateEventTitle', function () {\n        return function (string, length, boxHeight) {\n            if (!string) {\n                return '';\n            }\n            //Only truncate if if actually needs truncating\n            if (string.length >= length && string.length / 20 > boxHeight / 30) {\n                return string.substr(0, length) + '...';\n            } else {\n                return string;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('eventCountBadgeTotal', function () {\n        return function (events) {\n            return events.filter(function (event) {\n                return event.incrementsBadgeTotal !== false;\n            }).length;\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCollapseFallback', [\n        '$injector',\n        function ($injector) {\n            if ($injector.has('collapseDirective')) {\n                return {};\n            }\n            return {\n                restrict: 'A',\n                controller: [\n                    '$scope',\n                    '$attrs',\n                    '$element',\n                    function ($scope, $attrs, $element) {\n                        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function (shouldCollapse) {\n                            if (shouldCollapse) {\n                                $element.addClass('ng-hide');\n                            } else {\n                                $element.removeClass('ng-hide');\n                            }\n                        });\n                        var unbindDestroy = $scope.$on('$destroy', function () {\n                            unbindDestroy();\n                            unbindWatcher();\n                        });\n                    }\n                ]\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarYear', [\n        'moment',\n        function (moment) {\n            return {\n                templateUrl: 'templates/year.html',\n                restrict: 'EA',\n                require: '^mwlCalendar',\n                scope: {\n                    events: '=calendarEvents',\n                    currentDay: '=calendarCurrentDay',\n                    eventClick: '=calendarEventClick',\n                    eventEditClick: '=calendarEditEventClick',\n                    eventDeleteClick: '=calendarDeleteEventClick',\n                    editEventHtml: '=calendarEditEventHtml',\n                    deleteEventHtml: '=calendarDeleteEventHtml',\n                    autoOpen: '=calendarAutoOpen',\n                    timespanClick: '=calendarTimespanClick'\n                },\n                controller: [\n                    '$scope',\n                    '$sce',\n                    '$timeout',\n                    'calendarHelper',\n                    'eventCountBadgeTotalFilter',\n                    function ($scope, $sce, $timeout, calendarHelper, eventCountBadgeTotalFilter) {\n                        var firstRun = false;\n                        $scope.$sce = $sce;\n                        $scope.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                        function updateView() {\n                            $scope.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n                            //Auto open the calendar to the current day if set\n                            if ($scope.autoOpen && !firstRun) {\n                                $scope.view.forEach(function (row, rowIndex) {\n                                    row.forEach(function (year, cellIndex) {\n                                        if (moment($scope.currentDay).startOf('month').isSame(year.date)) {\n                                            $scope.monthClicked(rowIndex, cellIndex, true);\n                                            $timeout(function () {\n                                                firstRun = false;\n                                            });\n                                        }\n                                    });\n                                });\n                            }\n                        }\n                        $scope.$watch('currentDay', updateView);\n                        $scope.$watch('events', updateView, true);\n                        $scope.monthClicked = function (yearIndex, monthIndex, monthClickedFirstRun) {\n                            if (!monthClickedFirstRun) {\n                                $scope.timespanClick({ calendarDate: $scope.view[yearIndex][monthIndex].date.startOf('month').toDate() });\n                            }\n                            var handler = calendarHelper.toggleEventBreakdown($scope.view, yearIndex, monthIndex);\n                            $scope.view = handler.view;\n                            $scope.openEvents = handler.openEvents;\n                        };\n                        $scope.drillDown = function (month) {\n                            var date = moment($scope.currentDay).clone().month(month).toDate();\n                            if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                                $scope.calendarCtrl.changeView('month', date);\n                            }\n                        };\n                    }\n                ],\n                link: function (scope, element, attrs, calendarCtrl) {\n                    scope.calendarCtrl = calendarCtrl;\n                }\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarWeek', function () {\n        return {\n            templateUrl: 'templates/week.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                useIsoWeek: '=calendarUseIsoWeek',\n                timespanClick: '=calendarTimespanClick'\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                function ($scope, moment, calendarHelper) {\n                    function updateView() {\n                        $scope.view = calendarHelper.getWeekView($scope.events, $scope.currentDay, $scope.useIsoWeek);\n                    }\n                    $scope.drillDown = function (day) {\n                        var date = moment($scope.currentDay).clone().date(day).toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            $scope.calendarCtrl.changeView('day', date);\n                        }\n                    };\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                }\n            ],\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarSlideBox', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'templates/calendarSlideBox.html',\n            replace: true,\n            controller: [\n                '$scope',\n                '$attrs',\n                function ($scope, $attrs) {\n                    var unbindWatcher = $scope.$watch($attrs.isOpen, function (shouldCollapse) {\n                        $scope.shouldCollapse = shouldCollapse;\n                    });\n                    var unbindDestroy = $scope.$on('$destroy', function () {\n                        unbindDestroy();\n                        unbindWatcher();\n                    });\n                }\n            ],\n            require: [\n                '^?mwlCalendarMonth',\n                '^?mwlCalendarYear'\n            ],\n            link: function (scope, elm, attrs, ctrls) {\n                scope.isMonthView = !!ctrls[0];\n                scope.isYearView = !!ctrls[1];\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarMonth', function () {\n        return {\n            templateUrl: 'templates/month.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                eventEditClick: '=calendarEditEventClick',\n                eventDeleteClick: '=calendarDeleteEventClick',\n                editEventHtml: '=calendarEditEventHtml',\n                deleteEventHtml: '=calendarDeleteEventHtml',\n                autoOpen: '=calendarAutoOpen',\n                useIsoWeek: '=calendarUseIsoWeek',\n                timespanClick: '=calendarTimespanClick'\n            },\n            controller: [\n                '$scope',\n                '$sce',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'eventCountBadgeTotalFilter',\n                function ($scope, $sce, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter) {\n                    var firstRun = false;\n                    $scope.$sce = $sce;\n                    $scope.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n                    function updateView() {\n                        $scope.view = calendarHelper.getMonthView($scope.events, $scope.currentDay, $scope.useIsoWeek);\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && !firstRun) {\n                            $scope.view.forEach(function (week, rowIndex) {\n                                week.forEach(function (day, cellIndex) {\n                                    if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date.startOf('day'))) {\n                                        $scope.dayClicked(rowIndex, cellIndex, true);\n                                        $timeout(function () {\n                                            firstRun = false;\n                                        });\n                                    }\n                                });\n                            });\n                        }\n                    }\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                    $scope.weekDays = calendarHelper.getWeekDayNames(false, $scope.useIsoWeek);\n                    $scope.dayClicked = function (rowIndex, cellIndex, dayClickedFirstRun) {\n                        if (!dayClickedFirstRun) {\n                            $scope.timespanClick({ calendarDate: $scope.view[rowIndex][cellIndex].date.startOf('day').toDate() });\n                        }\n                        var handler = calendarHelper.toggleEventBreakdown($scope.view, rowIndex, cellIndex);\n                        $scope.view = handler.view;\n                        $scope.openEvents = handler.openEvents;\n                    };\n                    $scope.drillDown = function (day) {\n                        var date = moment($scope.currentDay).clone().date(day).toDate();\n                        if ($scope.timespanClick({ calendarDate: date }) !== false) {\n                            $scope.calendarCtrl.changeView('day', date);\n                        }\n                    };\n                    $scope.highlightEvent = function (event, shouldAddClass) {\n                        $scope.view.forEach(function (week) {\n                            week.forEach(function (day) {\n                                delete day.highlightClass;\n                                if (shouldAddClass) {\n                                    var dayContainsEvent = day.events.filter(function (e) {\n                                        return e.$id === event.$id;\n                                    }).length > 0;\n                                    if (dayContainsEvent) {\n                                        day.highlightClass = 'day-highlight dh-event-' + event.type;\n                                    }\n                                }\n                            });\n                        });\n                    };\n                }\n            ],\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarDay', function () {\n        return {\n            templateUrl: 'templates/day.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=calendarEvents',\n                currentDay: '=calendarCurrentDay',\n                eventClick: '=calendarEventClick',\n                eventLabel: '@calendarEventLabel',\n                timeLabel: '@calendarTimeLabel',\n                dayViewStart: '@calendarDayViewStart',\n                dayViewEnd: '@calendarDayViewEnd',\n                dayViewSplit: '@calendarDayViewSplit'\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                'calendarConfig',\n                function ($scope, moment, calendarHelper, calendarConfig) {\n                    var dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n                    var dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n                    $scope.dayViewSplit = parseInt($scope.dayViewSplit);\n                    $scope.dayHeight = 60 / $scope.dayViewSplit * 30;\n                    $scope.days = [];\n                    var dayCounter = moment(dayViewStart);\n                    for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n                        $scope.days.push({ label: dayCounter.format(calendarConfig.dateFormats.hour) });\n                        dayCounter.add(1, 'hour');\n                    }\n                    function updateView() {\n                        $scope.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), $scope.dayHeight);\n                    }\n                    $scope.$watch('currentDay', updateView);\n                    $scope.$watch('events', updateView, true);\n                }\n            ]\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendar', function () {\n        return {\n            templateUrl: 'templates/main.html',\n            restrict: 'EA',\n            scope: {\n                events: '=calendarEvents',\n                view: '=calendarView',\n                currentDay: '=calendarCurrentDay',\n                control: '=calendarControl',\n                eventClick: '&calendarEventClick',\n                eventEditClick: '&calendarEditEventClick',\n                eventDeleteClick: '&calendarDeleteEventClick',\n                editEventHtml: '=calendarEditEventHtml',\n                deleteEventHtml: '=calendarDeleteEventHtml',\n                autoOpen: '=calendarAutoOpen',\n                useIsoWeek: '=calendarUseIsoWeek',\n                eventLabel: '@calendarEventLabel',\n                timeLabel: '@calendarTimeLabel',\n                dayViewStart: '@calendarDayViewStart',\n                dayViewEnd: '@calendarDayViewEnd',\n                weekTitleLabel: '@calendarWeekTitleLabel',\n                timespanClick: '&calendarTimespanClick',\n                dayViewSplit: '@calendarDayViewSplit'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarConfig',\n                function ($scope, $timeout, moment, calendarConfig) {\n                    var self = this;\n                    var weekTitleLabel = $scope.weekTitleLabel || calendarConfig.titleFormats.week;\n                    this.titleFunctions = {\n                        day: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.day);\n                        },\n                        week: function (currentDay) {\n                            return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n                        },\n                        month: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.month);\n                        },\n                        year: function (currentDay) {\n                            return moment(currentDay).format(calendarConfig.titleFormats.year);\n                        }\n                    };\n                    this.changeView = function (view, newDay) {\n                        $scope.view = view;\n                        $scope.currentDay = newDay;\n                    };\n                    $scope.control = $scope.control || {};\n                    $scope.control.prev = function () {\n                        $scope.currentDay = moment($scope.currentDay).subtract(1, $scope.view).toDate();\n                    };\n                    $scope.control.next = function () {\n                        $scope.currentDay = moment($scope.currentDay).add(1, $scope.view).toDate();\n                    };\n                    $scope.control.getTitle = function () {\n                        if (!self.titleFunctions[$scope.view]) {\n                            return '';\n                        }\n                        return self.titleFunctions[$scope.view]($scope.currentDay);\n                    };\n                    //Auto update the calendar when the locale changes\n                    var firstRunWatcher = true;\n                    var unbindWatcher = $scope.$watch(function () {\n                        return moment.locale();\n                    }, function () {\n                        if (firstRunWatcher) {\n                            //dont run the first time the calendar is initialised\n                            firstRunWatcher = false;\n                            return;\n                        }\n                        var originalView = angular.copy($scope.view);\n                        $scope.view = 'redraw';\n                        $timeout(function () {\n                            //bit of a hacky way to redraw the calendar, should be refactored at some point\n                            $scope.view = originalView;\n                        });\n                    });\n                    //Remove the watcher when the calendar is destroyed\n                    var unbindDestroyListener = $scope.$on('$destroy', function () {\n                        unbindDestroyListener();\n                        unbindWatcher();\n                    });\n                }\n            ]\n        };\n    });\n}(window, angular));","'use strict';\n\nangular.module('mwl.calendar')\n  .provider('calendarConfig', function() {\n\n    var defaultDateFormats = {\n      hour: 'ha',\n      day: 'D MMM',\n      month: 'MMMM',\n      weekDay: 'dddd'\n    };\n\n    var defaultTitleFormats = {\n      day: 'dddd D MMMM, YYYY',\n      week: 'Week {week} of {year}',\n      month: 'MMMM YYYY',\n      year: 'YYYY'\n    };\n\n    var configProvider = this;\n\n    configProvider.configureDateFormats = function(formats) {\n      angular.extend(defaultDateFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.configureTitleFormats = function(formats) {\n      angular.extend(defaultTitleFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.$get = function() {\n      return {\n        dateFormats: defaultDateFormats,\n        titleFormats: defaultTitleFormats\n      };\n    };\n\n  });\n","'use strict';\n\nangular.module('mwl.calendar')\n  .filter('truncateEventTitle', function() {\n\n    return function(string, length, boxHeight) {\n      if (!string) {\n        return '';\n      }\n\n      //Only truncate if if actually needs truncating\n      if (string.length >= length && string.length / 20 > boxHeight / 30) {\n        return string.substr(0, length) + '...';\n      } else {\n        return string;\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mwl.calendar')\n  .filter('eventCountBadgeTotal', function() {\n\n    return function(events) {\n\n      return events.filter(function(event) {\n        return event.incrementsBadgeTotal !== false;\n      }).length;\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCollapseFallback', function($injector) {\n\n    if ($injector.has('collapseDirective')) {\n      return {};\n    }\n\n    return {\n      restrict: 'A',\n      controller: function($scope, $attrs, $element) {\n        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function(shouldCollapse) {\n          if (shouldCollapse) {\n            $element.addClass('ng-hide');\n          } else {\n            $element.removeClass('ng-hide');\n          }\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarYear', function(moment) {\n\n    return {\n      templateUrl: 'templates/year.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventEditClick: '=calendarEditEventClick',\n        eventDeleteClick: '=calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, $sce, $timeout, calendarHelper, eventCountBadgeTotalFilter) {\n        var firstRun = false;\n\n        $scope.$sce = $sce;\n        $scope.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        function updateView() {\n          $scope.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && !firstRun) {\n            $scope.view.forEach(function(row, rowIndex) {\n              row.forEach(function(year, cellIndex) {\n                if (moment($scope.currentDay).startOf('month').isSame(year.date)) {\n                  $scope.monthClicked(rowIndex, cellIndex, true);\n                  $timeout(function() {\n                    firstRun = false;\n                  });\n                }\n              });\n            });\n          }\n        }\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        $scope.monthClicked = function(yearIndex, monthIndex, monthClickedFirstRun) {\n\n          if (!monthClickedFirstRun) {\n            $scope.timespanClick({calendarDate: $scope.view[yearIndex][monthIndex].date.startOf('month').toDate()});\n          }\n\n          var handler = calendarHelper.toggleEventBreakdown($scope.view, yearIndex, monthIndex);\n          $scope.view = handler.view;\n          $scope.openEvents = handler.openEvents;\n\n        };\n\n        $scope.drillDown = function(month) {\n          var date = moment($scope.currentDay).clone().month(month).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            $scope.calendarCtrl.changeView('month', date);\n          }\n        };\n      },\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarWeek', function() {\n\n    return {\n      templateUrl: 'templates/week.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        useIsoWeek: '=calendarUseIsoWeek',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, moment, calendarHelper) {\n        function updateView() {\n          $scope.view = calendarHelper.getWeekView($scope.events, $scope.currentDay, $scope.useIsoWeek);\n        }\n\n        $scope.drillDown = function(day) {\n          var date = moment($scope.currentDay).clone().date(day).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            $scope.calendarCtrl.changeView('day', date);\n          }\n        };\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n      },\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarSlideBox', function() {\n\n    return {\n      restrict: 'EA',\n      templateUrl: 'templates/calendarSlideBox.html',\n      replace: true,\n      controller: function($scope, $attrs) {\n        var unbindWatcher = $scope.$watch($attrs.isOpen, function(shouldCollapse) {\n          $scope.shouldCollapse = shouldCollapse;\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      },\n      require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n      link: function(scope, elm, attrs, ctrls) {\n        scope.isMonthView = !!ctrls[0];\n        scope.isYearView = !!ctrls[1];\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarMonth', function() {\n\n    return {\n      templateUrl: 'templates/month.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventEditClick: '=calendarEditEventClick',\n        eventDeleteClick: '=calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        useIsoWeek: '=calendarUseIsoWeek',\n        timespanClick: '=calendarTimespanClick'\n      },\n      controller: function($scope, $sce, $timeout, moment, calendarHelper, eventCountBadgeTotalFilter) {\n        var firstRun = false;\n\n        $scope.$sce = $sce;\n        $scope.eventCountBadgeTotalFilter = eventCountBadgeTotalFilter;\n\n        function updateView() {\n          $scope.view = calendarHelper.getMonthView($scope.events, $scope.currentDay, $scope.useIsoWeek);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && !firstRun) {\n            $scope.view.forEach(function(week, rowIndex) {\n              week.forEach(function(day, cellIndex) {\n                if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date.startOf('day'))) {\n                  $scope.dayClicked(rowIndex, cellIndex, true);\n                  $timeout(function() {\n                    firstRun = false;\n                  });\n                }\n              });\n            });\n          }\n\n        }\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n        $scope.weekDays = calendarHelper.getWeekDayNames(false, $scope.useIsoWeek);\n\n        $scope.dayClicked = function(rowIndex, cellIndex, dayClickedFirstRun) {\n\n          if (!dayClickedFirstRun) {\n            $scope.timespanClick({calendarDate: $scope.view[rowIndex][cellIndex].date.startOf('day').toDate()});\n          }\n\n          var handler = calendarHelper.toggleEventBreakdown($scope.view, rowIndex, cellIndex);\n          $scope.view = handler.view;\n          $scope.openEvents = handler.openEvents;\n\n        };\n\n        $scope.drillDown = function(day) {\n          var date = moment($scope.currentDay).clone().date(day).toDate();\n          if ($scope.timespanClick({calendarDate: date}) !== false) {\n            $scope.calendarCtrl.changeView('day', date);\n          }\n        };\n\n        $scope.highlightEvent = function(event, shouldAddClass) {\n\n          $scope.view.forEach(function(week) {\n\n            week.forEach(function(day) {\n\n              delete day.highlightClass;\n\n              if (shouldAddClass) {\n                var dayContainsEvent = day.events.filter(function(e) {\n                  return e.$id === event.$id;\n                }).length > 0;\n\n                if (dayContainsEvent) {\n                  day.highlightClass = 'day-highlight dh-event-' + event.type;\n                }\n              }\n\n            });\n\n          });\n\n        };\n      },\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarDay', function() {\n\n    return {\n      templateUrl: 'templates/day.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=calendarEvents',\n        currentDay: '=calendarCurrentDay',\n        eventClick: '=calendarEventClick',\n        eventLabel: '@calendarEventLabel',\n        timeLabel: '@calendarTimeLabel',\n        dayViewStart: '@calendarDayViewStart',\n        dayViewEnd: '@calendarDayViewEnd',\n        dayViewSplit: '@calendarDayViewSplit'\n      },\n      controller: function($scope, moment, calendarHelper, calendarConfig) {\n\n        var dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n        var dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n\n        $scope.dayViewSplit = parseInt($scope.dayViewSplit);\n        $scope.dayHeight = (60 / $scope.dayViewSplit) * 30;\n\n        $scope.days = [];\n        var dayCounter = moment(dayViewStart);\n        for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n          $scope.days.push({\n            label: dayCounter.format(calendarConfig.dateFormats.hour)\n          });\n          dayCounter.add(1, 'hour');\n        }\n\n        function updateView() {\n          $scope.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), $scope.dayHeight);\n        }\n\n        $scope.$watch('currentDay', updateView);\n        $scope.$watch('events', updateView, true);\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendar', function() {\n\n    return {\n      templateUrl: 'templates/main.html',\n      restrict: 'EA',\n      scope: {\n        events: '=calendarEvents',\n        view: '=calendarView',\n        currentDay: '=calendarCurrentDay',\n        control: '=calendarControl',\n        eventClick: '&calendarEventClick',\n        eventEditClick: '&calendarEditEventClick',\n        eventDeleteClick: '&calendarDeleteEventClick',\n        editEventHtml: '=calendarEditEventHtml',\n        deleteEventHtml: '=calendarDeleteEventHtml',\n        autoOpen: '=calendarAutoOpen',\n        useIsoWeek: '=calendarUseIsoWeek',\n        eventLabel: '@calendarEventLabel',\n        timeLabel: '@calendarTimeLabel',\n        dayViewStart: '@calendarDayViewStart',\n        dayViewEnd: '@calendarDayViewEnd',\n        weekTitleLabel: '@calendarWeekTitleLabel',\n        timespanClick: '&calendarTimespanClick',\n        dayViewSplit: '@calendarDayViewSplit'\n      },\n      controller: function($scope, $timeout, moment, calendarConfig) {\n\n        var self = this;\n\n        var weekTitleLabel = $scope.weekTitleLabel || calendarConfig.titleFormats.week;\n        this.titleFunctions = {\n          day: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.day);\n          },\n          week: function(currentDay) {\n            return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n          },\n          month: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.month);\n          },\n          year: function(currentDay) {\n            return moment(currentDay).format(calendarConfig.titleFormats.year);\n          }\n        };\n\n        this.changeView = function(view, newDay) {\n          $scope.view = view;\n          $scope.currentDay = newDay;\n        };\n\n        $scope.control = $scope.control || {};\n\n        $scope.control.prev = function() {\n          $scope.currentDay = moment($scope.currentDay).subtract(1, $scope.view).toDate();\n        };\n\n        $scope.control.next = function() {\n          $scope.currentDay = moment($scope.currentDay).add(1, $scope.view).toDate();\n        };\n\n        $scope.control.getTitle = function() {\n          if (!self.titleFunctions[$scope.view]) {\n            return '';\n          }\n          return self.titleFunctions[$scope.view]($scope.currentDay);\n        };\n\n        //Auto update the calendar when the locale changes\n        var firstRunWatcher = true;\n        var unbindWatcher = $scope.$watch(function() {\n          return moment.locale();\n        }, function() {\n          if (firstRunWatcher) { //dont run the first time the calendar is initialised\n            firstRunWatcher = false;\n            return;\n          }\n          var originalView = angular.copy($scope.view);\n          $scope.view = 'redraw';\n          $timeout(function() { //bit of a hacky way to redraw the calendar, should be refactored at some point\n            $scope.view = originalView;\n          });\n        });\n\n        //Remove the watcher when the calendar is destroyed\n        var unbindDestroyListener = $scope.$on('$destroy', function() {\n          unbindDestroyListener();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}