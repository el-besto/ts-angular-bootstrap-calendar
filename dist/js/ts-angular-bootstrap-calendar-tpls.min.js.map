{"version":3,"sources":["templates.js","ts-angular-bootstrap-calendar-tpls.js","services/moment.js","services/calendarTitle.js","services/calendarHelper.js","services/calendarDebounce.js","services/calendarConfig.js","filters/calendarTruncateEventTitle.js","filters/calendarLimitTo.js","directives/mwlDateModifier.js","directives/mwlCollapseFallback.js","directives/mwlCalendarYear.js","directives/mwlCalendarWeek.js","directives/mwlCalendarSlideBox.js","directives/mwlCalendarMonth.js","directives/mwlCalendarDay.js","directives/mwlCalendar.js"],"names":["window","$templateCache","angular","run","put","module","constant","moment","factory","weekTitleLabel","day","currentDay","month","format","calendarConfig","titleFormats","week","replace","year","eventStart","periodEnd","eventIsInPeriod","eventEnd","periodStart","getEventsInPeriod","startPeriod","allEvents","filter","startsAt","endPeriod","isAfter","isBefore","isSame","calendarDate","period","startOf","endOf","incrementsBadgeTotal","length","event","weekdays","events","count","getWeekDayNames","getYearView","view","eventsInPeriod","dateFormats","weekDay","label","isToday","periodEvents","date","push","badgeTotal","getBadgeTotal","startOfMonth","endOfMonthView","today","unscheduledEvents","monthEvents","clone","inMonth","isFuture","isWeekend","isPast","indexOf","getWeekView","endOfWeek","days","weekDayLabel","dayCounter","dayLabel","eventsSorted","offset","startOfWeek","map","span","diff","weekViewStart","weekViewEnd","daySpan","dayOffset","calendarStart","calendarEnd","buckets","dayStartHour","dayEndHour","dayHeight","add","calendarHeight","dayHeightMultiplier","toDate","top","height","diffStart","forEach","bucket","canFitInThisBucket","cannotFitInABucket","getMonthView","bucketIndex","bucketItem","partParameters","startTime","endsAt","left","getDayView","service","args","$timeout","debounce","immediate","timeout","context","this","arguments","callNow","cancel","apply","later","wait","func","hour","provider","defaultTitleFormats","i18nStrings","eventsLabel","timeLabel","configProvider","formats","extend","defaultDateFormats","strings","$get","string","boxHeight","substr","limit","begin","Math","abs","input","Infinity","Number","toString","isNaN","slice","directive","max","restrict","controller","$element","isDefined","$scope","$attrs","setToToday","$apply","Date","increment","onClick","decrement","unbind","subtract","bind","$on","scope","$injector","has","unbindWatcher","$watch","mwlCollapseFallback","shouldCollapse","unbindDestroy","addClass","removeClass","templateUrl","onEventClick","onEditEventClick","require","onDeleteEventClick","deleteEventHtml","autoOpen","onTimespanClick","editEventHtml","vm","firstRun","calendarHelper","monthClicked","monthClickedFirstRun","openEvents","openRowIndex","floor","monthIndex","attrs","calendarCtrl","controllerAs","$sce","isOpen","isMonthView","link","elm","ctrls","$log","monthOffsets","weekDays","rows","i","dayClickedFirstRun","dayClicked","highlightEvent","dayIndex","monthDay","highlightClass","shouldAddClass","dayContainsEvent","type","dayViewStart","dayViewEnd","dayViewSplit","parseInt","originalLocale","locale","updateDays","hours","onDrillDownClick","calendarDebounce","console","changeDate","newDay","log","drillDown","changeView","nextView","calendarNextView","refreshCalendar","calendarTitle","viewTitle","unbindLocaleWatcher","unbindOnDestroy","unbindDestroyListener"],"mappings":"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","file":"ts-angular-bootstrap-calendar-tpls.min.js","sourcesContent":["angular.module(\"mwl.calendar\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"src/templates/calendar.html\",\"<mwl-calendar-month events=\\\"events\\\" current-day=\\\"currentDay\\\" on-event-click=\\\"onEventClick\\\" on-edit-event-click=\\\"onEditEventClick\\\" on-delete-event-click=\\\"onDeleteEventClick\\\" on-timespan-click=\\\"onTimespanClick\\\" edit-event-html=\\\"editEventHtml\\\" delete-event-html=\\\"deleteEventHtml\\\" auto-open=\\\"autoOpen\\\"></mwl-calendar-month>\");\n$templateCache.put(\"src/templates/calendarDayView.html\",\"<div class=\\\"cal-day-box\\\"><div class=\\\"row-fluid clearfix cal-row-head\\\"><div class=\\\"span1 col-xs-1 cal-cell\\\">{{ vm.calendarConfig.i18nStrings.timeLabel }}</div><div class=\\\"span11 col-xs-11 cal-cell\\\">{{ vm.calendarConfig.i18nStrings.eventsLabel }}</div></div><div class=\\\"cal-day-panel\\\" class=\\\"clearfix\\\" ng-style=\\\"{height: (vm.days.length * vm.dayHeight) + \\'px\\'}\\\"><div class=\\\"cal-day-panel-hour\\\"><div class=\\\"cal-day-hour\\\" ng-repeat=\\\"day in vm.days track by $index\\\"><div class=\\\"row-fluid cal-day-hour-part\\\"><div class=\\\"span1 col-xs-1\\\"><strong>{{ day.label }}</strong></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-show=\\\"vm.dayViewSplit < 30\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-show=\\\"vm.dayViewSplit < 30\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-show=\\\"vm.dayViewSplit < 15\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-show=\\\"vm.dayViewSplit < 15\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div></div></div><div class=\\\"pull-left day-event day-highlight dh-event-{{ event.type }}\\\" ng-repeat=\\\"event in vm.view track by $index\\\" ng-style=\\\"{top: event.top + \\'px\\', left: event.left + 60 + \\'px\\', height: event.height + \\'px\\'}\\\"><a href=\\\"javascript:;\\\" class=\\\"event-item\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\"><span>{{ event.title | calendarTruncateEventTitle:20:event.height }}</span></a></div></div></div>\");\n$templateCache.put(\"src/templates/calendarMonthDay.html\",\"<div class=\\\"cal-month-day\\\" ng-class=\\\"{\\n            \\'cal-day-outmonth\\': !day.inMonth,\\n            \\'cal-day-inmonth\\': day.inMonth,\\n            \\'cal-day-weekend\\': day.isWeekend,\\n            \\'cal-day-past\\': day.isPast,\\n            \\'cal-day-today\\': day.isToday,\\n            \\'cal-day-future\\': day.isFuture\\n          }\\\"><span class=\\\"calMonthDayNumber\\\" data-cal-date ng-click=\\\"vm.calendarCtrl.changeDate(day.date)\\\">{{ day.label }}</span> <span class=\\\"calMonthDayEventCount\\\"><small class=\\\"cal-events-num badge badge-important\\\" ng-show=\\\"day.badgeTotal > 0\\\">{{ day.badgeTotal }}</small></span></div>\");\n$templateCache.put(\"src/templates/calendarMonthEventsList.html\",\"<div class=\\\"events-list cal-month-day-dots\\\" ng-show=\\\"day.events.length > 0\\\"><span href=\\\"javascript:;\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\" ng-repeat=\\\"event in day.events track by $index\\\" class=\\\"pull-left event event-{{ event.type }}\\\" ng-mouseenter=\\\"vm.highlightEvent(event, true)\\\" ng-mouseleave=\\\"vm.highlightEvent(event, false)\\\" tooltip-append-to-body=\\\"true\\\" tooltip=\\\"{{ event.title }}\\\" aria-ignore=\\\"true\\\"></span> <a href=\\\"javascript:;\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\" ng-repeat=\\\"event in day.events track by $index\\\" class=\\\"pull-left event event-{{ event.type }}\\\" ng-mouseenter=\\\"vm.highlightEvent(event, true)\\\" ng-mouseleave=\\\"vm.highlightEvent(event, false)\\\" tooltip-append-to-body=\\\"true\\\" tooltip=\\\"{{ event.title }}\\\" aria-ignore=\\\"true\\\"></a></div>\");\n$templateCache.put(\"src/templates/calendarMonthView.html\",\"<div class=\\\"cal-row-fluid cal-row-head\\\"><div class=\\\"cal-cell1\\\" ng-repeat=\\\"day in vm.weekDays track by $index\\\">{{ day }}</div><hr class=\\\"calendar-grid-heading-stripe\\\"></div><div class=\\\"cal-month-box\\\"><div ng-repeat=\\\"rowOffset in vm.monthOffsets track by rowOffset\\\"><div class=\\\"cal-row-fluid cal-before-eventlist\\\"><div ng-repeat=\\\"day in vm.view | calendarLimitTo:7:rowOffset track by $index\\\" class=\\\"cal-cell1 cal-cell {{ day.highlightClass }}\\\" ng-click=\\\"vm.dayClicked(day)\\\" ng-class=\\\"{pointer: day.events.length > 0}\\\"><div ng-include=\\\"\\'src/templates/calendarMonthDay.html\\'\\\"></div></div></div></div><mwl-calendar-slide-box is-open=\\\"vm.openRowIndex === $index && vm.view[vm.openDayIndex].events.length > 0\\\" events=\\\"vm.view[vm.openDayIndex].events\\\" on-event-click=\\\"onEventClick\\\" edit-event-html=\\\"editEventHtml\\\" on-edit-event-click=\\\"onEditEventClick\\\" delete-event-html=\\\"deleteEventHtml\\\" on-delete-event-click=\\\"onDeleteEventClick\\\"></mwl-calendar-slide-box></div>\");\n$templateCache.put(\"src/templates/calendarSlideBox-original.html\",\"\");\n$templateCache.put(\"src/templates/calendarSlideBox.html\",\"<div class=\\\"cal-slide-box\\\" collapse=\\\"vm.shouldCollapse\\\" mwl-collapse-fallback=\\\"vm.shouldCollapse\\\"><div class=\\\"cal-slide-content cal-event-list\\\"><ul class=\\\"unstyled list-unstyled\\\"><div ng-show=\\\"events.length === 0\\\" class=\\\"event-list-header\\\"><h4 class=\\\"gray-light\\\"><em>No events scheduled for day</em></h4></div><div class=\\\"row\\\"><div class=\\\"col-xs-12\\\" ng-repeat=\\\"event in events track by $index\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-2\\\"><span class=\\\"scheduled-tasks-date ts-burgundy\\\"><span ng-if=\\\"$first\\\">TODAY</span> <span ng-if=\\\"$first\\\">{{calendarDate}}</span> <span ng-if=\\\"!$first\\\">{{calendarDate}}</span></span><br><span class=\\\"scheduled-tasks-date ts-burgundy\\\">{{event.startsAt | date: \\'EEEE\\'}}</span><br><span class=\\\"scheduled-tasks-date ts-burgundy\\\">{{event.startsAt | date: \\'MMM. dd\\' }}</span></div><div class=\\\"col-xs-2\\\"><span class=\\\"scheduled-tasks-time gray-light\\\">{{event.startsAt | date: \\'h:mm a\\'}}</span></div><div class=\\\"col-xs-6 event-list-primary-details\\\"><span class=\\\"small icon-{{ icons[event.assessmentPartType] }} gray-dark\\\"><span class=\\\"event-list-title gray-dark\\\"><a href=\\\"javascript:;\\\" class=\\\"event-item gray-dark\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\">{{event.title }}</a></span><br><span class=\\\"event-list-event-type pull-left gray-dark\\\"><span class=\\\"tree-left-icon small icon-{{ icons[event.assessmentPartType] }} pull-left\\\"></span> {{event.assessmentPartType | lowercase}}</span><br><span class=\\\"event-list-observer pull-left gray-dark\\\">Observer: {{event.actorLastNameFirstName}}</span></span></div><div class=\\\"col-xs-2\\\"><span ng-show=\\\"event.actorId === $scope.currentUserActorId\\\" class=\\\"pull-right event-list-action ts-blue\\\"><button class=\\\"btn btn-primary\\\" ng-click=\\\"logDay()\\\">reschedule</button></span> <a href=\\\"javascript:;\\\" class=\\\"pull-right ts-blue event-item-edit\\\" ng-if=\\\"editEventHtml && event.editable !== false\\\" ng-bind-html=\\\"vm.$sce.trustAsHtml(editEventHtml)\\\" ng-click=\\\"onEditEventClick({calendarEvent: event})\\\"></a></div></div><hr class=\\\"event-list-separator\\\" ng-if=\\\"!$last\\\"></div></div></ul></div></div>\");\n$templateCache.put(\"src/templates/calendarWeekView.html\",\"<div class=\\\"cal-week-box\\\"><div class=\\\"cal-row-fluid cal-row-head\\\"><div class=\\\"cal-cell1\\\" ng-repeat=\\\"day in vm.view.days track by $index\\\" ng-class=\\\"{\\n        \\'cal-day-weekend\\': day.isWeekend,\\n        \\'cal-day-past\\': day.isPast,\\n        \\'cal-day-today\\': day.isToday,\\n        \\'cal-day-future\\': day.isFuture}\\\">{{ day.weekDayLabel }}<br><small><span data-cal-date ng-click=\\\"vm.calendarCtrl.drillDown(day.date.toDate())\\\" class=\\\"pointer\\\">{{ day.dayLabel }}</span></small></div></div><div class=\\\"cal-row-fluid\\\" ng-repeat=\\\"event in vm.view.events track by $index\\\"><div class=\\\"cal-cell{{ event.daySpan }} cal-offset{{ event.dayOffset }} day-highlight dh-event-{{ event.type }}\\\" data-event-class><a href=\\\"javascript:;\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\" class=\\\"cal-event-week\\\">{{ event.title }}</a></div></div></div>\");\n$templateCache.put(\"src/templates/calendarYearView.html\",\"<div class=\\\"cal-year-box\\\"><div ng-repeat=\\\"rowOffset in [0, 4, 8] track by rowOffset\\\"><div class=\\\"row cal-before-eventlist\\\"><div class=\\\"span3 col-md-3 col-xs-6 cal-cell\\\" ng-repeat=\\\"month in vm.view | calendarLimitTo:4:rowOffset track by $index\\\" ng-click=\\\"vm.monthClicked(month)\\\" ng-class=\\\"{pointer: month.events.length > 0, \\'cal-day-today\\': month.isToday}\\\"><span class=\\\"pull-right\\\" data-cal-date ng-click=\\\"vm.calendarCtrl.drillDown(month.date)\\\">{{ month.label }}</span> <small class=\\\"cal-events-num badge badge-important pull-left\\\" ng-show=\\\"month.badgeTotal > 0\\\">{{ month.badgeTotal }}</small><div class=\\\"cal-day-tick\\\" ng-show=\\\"month.isOpened\\\"><i class=\\\"glyphicon glyphicon-chevron-up\\\"></i> <i class=\\\"fa fa-chevron-up\\\"></i></div></div></div><mwl-calendar-slide-box is-open=\\\"vm.openRowIndex === $index\\\" events=\\\"vm.openEvents\\\" on-event-click=\\\"onEventClick\\\" edit-event-html=\\\"editEventHtml\\\" on-edit-event-click=\\\"onEditEventClick\\\" delete-event-html=\\\"deleteEventHtml\\\" on-delete-event-click=\\\"onDeleteEventClick\\\"></mwl-calendar-slide-box></div></div>\");}]);","/**\n * ts-angular-bootstrap-calendar - A pure AngularJS bootstrap themed responsive calendar that can display events and has views for year, month, week and day. Modified for use by Teachscape.\n * @version v0.1.1\n * @link https://github.com/el-besto/ts-angular-bootstrap-calendar\n * @license MIT\n */\n(function (window, angular) {\n    'use strict';\n    angular.module('mwl.calendar', []);\n    angular.module('mwl.calendar').run([\n        '$templateCache',\n        function ($templateCache) {\n            $templateCache.put('src/templates/calendar.html', '<mwl-calendar-month events=\"events\" current-day=\"currentDay\" on-event-click=\"onEventClick\" on-edit-event-click=\"onEditEventClick\" on-delete-event-click=\"onDeleteEventClick\" on-timespan-click=\"onTimespanClick\" edit-event-html=\"editEventHtml\" delete-event-html=\"deleteEventHtml\" auto-open=\"autoOpen\"></mwl-calendar-month>');\n            $templateCache.put('src/templates/calendarDayView.html', '<div class=\"cal-day-box\"><div class=\"row-fluid clearfix cal-row-head\"><div class=\"span1 col-xs-1 cal-cell\">{{ vm.calendarConfig.i18nStrings.timeLabel }}</div><div class=\"span11 col-xs-11 cal-cell\">{{ vm.calendarConfig.i18nStrings.eventsLabel }}</div></div><div class=\"cal-day-panel\" class=\"clearfix\" ng-style=\"{height: (vm.days.length * vm.dayHeight) + \\'px\\'}\"><div class=\"cal-day-panel-hour\"><div class=\"cal-day-hour\" ng-repeat=\"day in vm.days track by $index\"><div class=\"row-fluid cal-day-hour-part\"><div class=\"span1 col-xs-1\"><strong>{{ day.label }}</strong></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-show=\"vm.dayViewSplit < 30\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-show=\"vm.dayViewSplit < 30\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-show=\"vm.dayViewSplit < 15\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-show=\"vm.dayViewSplit < 15\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div></div></div><div class=\"pull-left day-event day-highlight dh-event-{{ event.type }}\" ng-repeat=\"event in vm.view track by $index\" ng-style=\"{top: event.top + \\'px\\', left: event.left + 60 + \\'px\\', height: event.height + \\'px\\'}\"><a href=\"javascript:;\" class=\"event-item\" ng-click=\"onEventClick({calendarEvent: event})\"><span>{{ event.title | calendarTruncateEventTitle:20:event.height }}</span></a></div></div></div>');\n            $templateCache.put('src/templates/calendarMonthDay.html', '<div class=\"cal-month-day\" ng-class=\"{\\n            \\'cal-day-outmonth\\': !day.inMonth,\\n            \\'cal-day-inmonth\\': day.inMonth,\\n            \\'cal-day-weekend\\': day.isWeekend,\\n            \\'cal-day-past\\': day.isPast,\\n            \\'cal-day-today\\': day.isToday,\\n            \\'cal-day-future\\': day.isFuture\\n          }\"><span class=\"calMonthDayNumber\" data-cal-date ng-click=\"vm.calendarCtrl.changeDate(day.date)\">{{ day.label }}</span> <span class=\"calMonthDayEventCount\"><small class=\"cal-events-num badge badge-important\" ng-show=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</small></span></div>');\n            $templateCache.put('src/templates/calendarMonthEventsList.html', '<div class=\"events-list cal-month-day-dots\" ng-show=\"day.events.length > 0\"><span href=\"javascript:;\" ng-click=\"onEventClick({calendarEvent: event})\" ng-repeat=\"event in day.events track by $index\" class=\"pull-left event event-{{ event.type }}\" ng-mouseenter=\"vm.highlightEvent(event, true)\" ng-mouseleave=\"vm.highlightEvent(event, false)\" tooltip-append-to-body=\"true\" tooltip=\"{{ event.title }}\" aria-ignore=\"true\"></span> <a href=\"javascript:;\" ng-click=\"onEventClick({calendarEvent: event})\" ng-repeat=\"event in day.events track by $index\" class=\"pull-left event event-{{ event.type }}\" ng-mouseenter=\"vm.highlightEvent(event, true)\" ng-mouseleave=\"vm.highlightEvent(event, false)\" tooltip-append-to-body=\"true\" tooltip=\"{{ event.title }}\" aria-ignore=\"true\"></a></div>');\n            $templateCache.put('src/templates/calendarMonthView.html', '<div class=\"cal-row-fluid cal-row-head\"><div class=\"cal-cell1\" ng-repeat=\"day in vm.weekDays track by $index\">{{ day }}</div><hr class=\"calendar-grid-heading-stripe\"></div><div class=\"cal-month-box\"><div ng-repeat=\"rowOffset in vm.monthOffsets track by rowOffset\"><div class=\"cal-row-fluid cal-before-eventlist\"><div ng-repeat=\"day in vm.view | calendarLimitTo:7:rowOffset track by $index\" class=\"cal-cell1 cal-cell {{ day.highlightClass }}\" ng-click=\"vm.dayClicked(day)\" ng-class=\"{pointer: day.events.length > 0}\"><div ng-include=\"\\'src/templates/calendarMonthDay.html\\'\"></div></div></div></div><mwl-calendar-slide-box is-open=\"vm.openRowIndex === $index && vm.view[vm.openDayIndex].events.length > 0\" events=\"vm.view[vm.openDayIndex].events\" on-event-click=\"onEventClick\" edit-event-html=\"editEventHtml\" on-edit-event-click=\"onEditEventClick\" delete-event-html=\"deleteEventHtml\" on-delete-event-click=\"onDeleteEventClick\"></mwl-calendar-slide-box></div>');\n            $templateCache.put('src/templates/calendarSlideBox-original.html', '');\n            $templateCache.put('src/templates/calendarSlideBox.html', '<div class=\"cal-slide-box\" collapse=\"vm.shouldCollapse\" mwl-collapse-fallback=\"vm.shouldCollapse\"><div class=\"cal-slide-content cal-event-list\"><ul class=\"unstyled list-unstyled\"><div ng-show=\"events.length === 0\" class=\"event-list-header\"><h4 class=\"gray-light\"><em>No events scheduled for day</em></h4></div><div class=\"row\"><div class=\"col-xs-12\" ng-repeat=\"event in events track by $index\"><div class=\"row\"><div class=\"col-xs-2\"><span class=\"scheduled-tasks-date ts-burgundy\"><span ng-if=\"$first\">TODAY</span> <span ng-if=\"$first\">{{calendarDate}}</span> <span ng-if=\"!$first\">{{calendarDate}}</span></span><br><span class=\"scheduled-tasks-date ts-burgundy\">{{event.startsAt | date: \\'EEEE\\'}}</span><br><span class=\"scheduled-tasks-date ts-burgundy\">{{event.startsAt | date: \\'MMM. dd\\' }}</span></div><div class=\"col-xs-2\"><span class=\"scheduled-tasks-time gray-light\">{{event.startsAt | date: \\'h:mm a\\'}}</span></div><div class=\"col-xs-6 event-list-primary-details\"><span class=\"small icon-{{ icons[event.assessmentPartType] }} gray-dark\"><span class=\"event-list-title gray-dark\"><a href=\"javascript:;\" class=\"event-item gray-dark\" ng-click=\"onEventClick({calendarEvent: event})\">{{event.title }}</a></span><br><span class=\"event-list-event-type pull-left gray-dark\"><span class=\"tree-left-icon small icon-{{ icons[event.assessmentPartType] }} pull-left\"></span> {{event.assessmentPartType | lowercase}}</span><br><span class=\"event-list-observer pull-left gray-dark\">Observer: {{event.actorLastNameFirstName}}</span></span></div><div class=\"col-xs-2\"><span ng-show=\"event.actorId === $scope.currentUserActorId\" class=\"pull-right event-list-action ts-blue\"><button class=\"btn btn-primary\" ng-click=\"logDay()\">reschedule</button></span> <a href=\"javascript:;\" class=\"pull-right ts-blue event-item-edit\" ng-if=\"editEventHtml && event.editable !== false\" ng-bind-html=\"vm.$sce.trustAsHtml(editEventHtml)\" ng-click=\"onEditEventClick({calendarEvent: event})\"></a></div></div><hr class=\"event-list-separator\" ng-if=\"!$last\"></div></div></ul></div></div>');\n            $templateCache.put('src/templates/calendarWeekView.html', '<div class=\"cal-week-box\"><div class=\"cal-row-fluid cal-row-head\"><div class=\"cal-cell1\" ng-repeat=\"day in vm.view.days track by $index\" ng-class=\"{\\n        \\'cal-day-weekend\\': day.isWeekend,\\n        \\'cal-day-past\\': day.isPast,\\n        \\'cal-day-today\\': day.isToday,\\n        \\'cal-day-future\\': day.isFuture}\">{{ day.weekDayLabel }}<br><small><span data-cal-date ng-click=\"vm.calendarCtrl.drillDown(day.date.toDate())\" class=\"pointer\">{{ day.dayLabel }}</span></small></div></div><div class=\"cal-row-fluid\" ng-repeat=\"event in vm.view.events track by $index\"><div class=\"cal-cell{{ event.daySpan }} cal-offset{{ event.dayOffset }} day-highlight dh-event-{{ event.type }}\" data-event-class><a href=\"javascript:;\" ng-click=\"onEventClick({calendarEvent: event})\" class=\"cal-event-week\">{{ event.title }}</a></div></div></div>');\n            $templateCache.put('src/templates/calendarYearView.html', '<div class=\"cal-year-box\"><div ng-repeat=\"rowOffset in [0, 4, 8] track by rowOffset\"><div class=\"row cal-before-eventlist\"><div class=\"span3 col-md-3 col-xs-6 cal-cell\" ng-repeat=\"month in vm.view | calendarLimitTo:4:rowOffset track by $index\" ng-click=\"vm.monthClicked(month)\" ng-class=\"{pointer: month.events.length > 0, \\'cal-day-today\\': month.isToday}\"><span class=\"pull-right\" data-cal-date ng-click=\"vm.calendarCtrl.drillDown(month.date)\">{{ month.label }}</span> <small class=\"cal-events-num badge badge-important pull-left\" ng-show=\"month.badgeTotal > 0\">{{ month.badgeTotal }}</small><div class=\"cal-day-tick\" ng-show=\"month.isOpened\"><i class=\"glyphicon glyphicon-chevron-up\"></i> <i class=\"fa fa-chevron-up\"></i></div></div></div><mwl-calendar-slide-box is-open=\"vm.openRowIndex === $index\" events=\"vm.openEvents\" on-event-click=\"onEventClick\" edit-event-html=\"editEventHtml\" on-edit-event-click=\"onEditEventClick\" delete-event-html=\"deleteEventHtml\" on-delete-event-click=\"onDeleteEventClick\"></mwl-calendar-slide-box></div></div>');\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').constant('moment', window.moment);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarTitle', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            function day(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.day);\n            }\n            function week(currentDay) {\n                var weekTitleLabel = calendarConfig.titleFormats.week;\n                return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n            }\n            function month(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.month);\n            }\n            function year(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.year);\n            }\n            return {\n                day: day,\n                week: week,\n                month: month,\n                year: year\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarHelper', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            // CUSTOMIZATION: change eventEnd to be the same as eventStart\n            function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n                eventStart = moment(eventStart);\n                eventEnd = moment(eventStart);\n                periodStart = moment(periodStart);\n                periodEnd = moment(periodEnd);\n                return eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd) || eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd) || eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd) || eventStart.isSame(periodStart) || eventEnd.isSame(periodEnd);\n            }\n            function getEventsInPeriod(calendarDate, period, allEvents) {\n                var startPeriod = moment(calendarDate).startOf(period);\n                var endPeriod = moment(calendarDate).endOf(period);\n                return allEvents.filter(function (event) {\n                    return eventIsInPeriod(event.startsAt, event.startsAt, startPeriod, endPeriod);\n                });\n            }\n            function getBadgeTotal(events) {\n                return events.filter(function (event) {\n                    return event.incrementsBadgeTotal !== false;\n                }).length;\n            }\n            function getWeekDayNames() {\n                var weekdays = [];\n                var count = 0;\n                while (count < 7) {\n                    weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n                }\n                return weekdays;\n            }\n            function getYearView(events, currentDay) {\n                var view = [];\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n                var month = moment(currentDay).startOf('year');\n                var count = 0;\n                while (count < 12) {\n                    var startPeriod = month.clone();\n                    var endPeriod = startPeriod.clone().endOf('month');\n                    var periodEvents = eventsInPeriod.filter(function (event) {\n                        return eventIsInPeriod(event.startsAt, event.startsAt, startPeriod, endPeriod);\n                    });\n                    view.push({\n                        label: startPeriod.format(calendarConfig.dateFormats.month),\n                        isToday: startPeriod.isSame(moment().startOf('month')),\n                        events: periodEvents,\n                        date: startPeriod,\n                        badgeTotal: getBadgeTotal(periodEvents)\n                    });\n                    month.add(1, 'month');\n                    count++;\n                }\n                return view;\n            }\n            function getMonthView(events, currentDay, unscheduledEvents) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n                var startOfMonth = moment(currentDay).startOf('month');\n                var day = startOfMonth.clone().startOf('week');\n                var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n                var view = [];\n                var today = moment().startOf('day');\n                while (day.isBefore(endOfMonthView)) {\n                    var inMonth = day.month() === moment(currentDay).month();\n                    var monthEvents = [];\n                    if (inMonth) {\n                        monthEvents = eventsInPeriod.filter(function (event) {\n                            return eventIsInPeriod(event.startsAt, event.startsAt, day, day.clone().endOf('day'));\n                        });\n                    }\n                    view.push({\n                        label: day.date(),\n                        date: day.clone(),\n                        inMonth: inMonth,\n                        isPast: today.isAfter(day),\n                        isToday: today.isSame(day),\n                        isFuture: today.isBefore(day),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(day.day()) > -1,\n                        events: monthEvents,\n                        badgeTotal: getBadgeTotal(monthEvents)\n                    });\n                    day.add(1, 'day');\n                }\n                return view;\n            }\n            function getWeekView(events, currentDay) {\n                var startOfWeek = moment(currentDay).startOf('week');\n                var endOfWeek = moment(currentDay).endOf('week');\n                var dayCounter = startOfWeek.clone();\n                var days = [];\n                var today = moment().startOf('day');\n                while (days.length < 7) {\n                    days.push({\n                        weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n                        date: dayCounter.clone(),\n                        dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n                        isPast: dayCounter.isBefore(today),\n                        isToday: dayCounter.isSame(today),\n                        isFuture: dayCounter.isAfter(today),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(dayCounter.day()) > -1\n                    });\n                    dayCounter.add(1, 'day');\n                }\n                var eventsSorted = events.filter(function (event) {\n                    return eventIsInPeriod(event.startsAt, event.startsAt, startOfWeek, endOfWeek);\n                }).map(function (event) {\n                    var eventStart = moment(event.startsAt).startOf('day');\n                    var eventEnd = moment(event.startsAt).startOf('day');\n                    var weekViewStart = moment(startOfWeek).startOf('day');\n                    var weekViewEnd = moment(endOfWeek).startOf('day');\n                    var offset, span;\n                    if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n                        offset = 0;\n                    } else {\n                        offset = eventStart.diff(weekViewStart, 'days');\n                    }\n                    if (eventEnd.isAfter(weekViewEnd)) {\n                        eventEnd = weekViewEnd;\n                    }\n                    if (eventStart.isBefore(weekViewStart)) {\n                        eventStart = weekViewStart;\n                    }\n                    span = moment(eventEnd).diff(eventStart, 'days') + 1;\n                    event.daySpan = span;\n                    event.dayOffset = offset;\n                    return event;\n                });\n                return {\n                    days: days,\n                    events: eventsSorted\n                };\n            }\n            function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n                var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n                var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n                var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n                var dayHeightMultiplier = dayHeight / 60;\n                var buckets = [];\n                return eventsInPeriod.filter(function (event) {\n                    return eventIsInPeriod(event.startsAt, event.startsAt, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n                }).map(function (event) {\n                    if (moment(event.startsAt).isBefore(calendarStart)) {\n                        event.top = 0;\n                    } else {\n                        event.top = moment(event.startsAt).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier - 2;\n                    }\n                    if (moment(event.startsAt).isAfter(calendarEnd)) {\n                        event.height = calendarHeight - event.top;\n                    } else {\n                        var diffStart = event.startsAt;\n                        if (moment(event.startsAt).isBefore(calendarStart)) {\n                            diffStart = calendarStart.toDate();\n                        }\n                        event.height = moment(event.startsAt).diff(diffStart, 'minutes') * dayHeightMultiplier;\n                    }\n                    if (event.top - event.height > calendarHeight) {\n                        event.height = 0;\n                    }\n                    event.left = 0;\n                    return event;\n                }).filter(function (event) {\n                    return event.height > 0;\n                }).map(function (event) {\n                    var cannotFitInABucket = true;\n                    buckets.forEach(function (bucket, bucketIndex) {\n                        var canFitInThisBucket = true;\n                        bucket.forEach(function (bucketItem) {\n                            if (eventIsInPeriod(event.startsAt, event.startsAt, bucketItem.partParameters.startTime, bucketItem.endsAt) || eventIsInPeriod(bucketItem.partParameters.startTime, bucketItem.endsAt, event.startsAt, event.startsAt)) {\n                                canFitInThisBucket = false;\n                            }\n                        });\n                        if (canFitInThisBucket && cannotFitInABucket) {\n                            cannotFitInABucket = false;\n                            event.left = bucketIndex * 150;\n                            buckets[bucketIndex].push(event);\n                        }\n                    });\n                    if (cannotFitInABucket) {\n                        event.left = buckets.length * 150;\n                        buckets.push([event]);\n                    }\n                    return event;\n                });\n            }\n            return {\n                getWeekDayNames: getWeekDayNames,\n                getYearView: getYearView,\n                getMonthView: getMonthView,\n                getWeekView: getWeekView,\n                getDayView: getDayView\n            };\n        }\n    ]);\n    // 'use strict';\n    // angular\n    //   .module('mwl.calendar')\n    //   .factory('calendarHelper', function (moment, calendarConfig) {\n    //     // CUSTOMIZATION: Toggle events on calendar between 'all' and 'my'.\n    //     //  this provides the switch between all events or just those that\n    //     //  match actorId of the currentUser\n    //     // function toggleDisplayedEvents(eventsDisplayed) {\n    //     //   if (eventsDisplayed === 'all') {\n    //     //     return 'my';\n    //     //   }\n    //     //   return 'all';\n    //     // }\n    //     function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n    //       eventStart = moment(eventStart);\n    //       eventEnd = moment(eventEnd);\n    //       periodStart = moment(periodStart);\n    //       periodEnd = moment(periodEnd);\n    //       return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n    //         (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n    //         (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n    //         eventStart.isSame(periodStart) ||\n    //         eventEnd.isSame(periodEnd);\n    //     }\n    //     function getEventsInPeriod(calendarDate, period, allEvents) {\n    //       var startPeriod = moment(calendarDate).startOf(period);\n    //       var endPeriod = moment(calendarDate).endOf(period);\n    //       return allEvents.filter(function(event) {\n    //         return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n    //       });\n    //     }\n    //     function getBadgeTotal(events) {\n    //       return events.filter(function(event) {\n    //         return event.incrementsBadgeTotal !== false;\n    //       }).length;\n    //     }\n    //     function getWeekDayNames() {\n    //       var weekdays = [];\n    //       var count = 0;\n    //       while(count < 7) {\n    //         weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n    //       }\n    //       return weekdays;\n    //     }\n    //     function getYearView(events, currentDay) {\n    //       var view = [];\n    //       var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n    //       var month = moment(currentDay).startOf('year');\n    //       var count = 0;\n    //       while (count < 12) {\n    //         var startPeriod = month.clone();\n    //         var endPeriod = startPeriod.clone().endOf('month');\n    //         var periodEvents = eventsInPeriod.filter(function(event) {\n    //           return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n    //         });\n    //         view.push({\n    //           label: startPeriod.format(calendarConfig.dateFormats.month),\n    //           isToday: startPeriod.isSame(moment().startOf('month')),\n    //           events: periodEvents,\n    //           date: startPeriod,\n    //           badgeTotal: getBadgeTotal(periodEvents)\n    //         });\n    //         month.add(1, 'month');\n    //         count++;\n    //       }\n    //       return view;\n    //     }\n    //     function getMonthView(events, currentDay) {\n    //       var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n    //       var startOfMonth = moment(currentDay).startOf('month');\n    //       var day = startOfMonth.clone().startOf('week');\n    //       var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n    //       var view = [];\n    //       var today = moment().startOf('day');\n    //       while (day.isBefore(endOfMonthView)) {\n    //         var inMonth = day.month() === moment(currentDay).month();\n    //         var monthEvents = [];\n    //         if (inMonth) {\n    //           monthEvents = eventsInPeriod.filter(function(event) {\n    //             return eventIsInPeriod(event.startsAt, event.endsAt, day, day.clone().endOf('day'));\n    //           });\n    //         }\n    //         view.push({\n    //           label: day.date(),\n    //           date: day.clone(),\n    //           inMonth: inMonth,\n    //           isPast: today.isAfter(day),\n    //           isToday: today.isSame(day),\n    //           isFuture: today.isBefore(day),\n    //           isWeekend: [0, 6].indexOf(day.day()) > -1,\n    //           events: monthEvents,\n    //           badgeTotal: getBadgeTotal(monthEvents)\n    //         });\n    //         day.add(1, 'day');\n    //       }\n    //       return view;\n    //     }\n    //     function getWeekView(events, currentDay) {\n    //       var startOfWeek = moment(currentDay).startOf('week');\n    //       var endOfWeek = moment(currentDay).endOf('week');\n    //       var dayCounter = startOfWeek.clone();\n    //       var days = [];\n    //       var today = moment().startOf('day');\n    //       while(days.length < 7) {\n    //         days.push({\n    //           weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n    //           date: dayCounter.clone(),\n    //           dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n    //           isPast: dayCounter.isBefore(today),\n    //           isToday: dayCounter.isSame(today),\n    //           isFuture: dayCounter.isAfter(today),\n    //           isWeekend: [0, 6].indexOf(dayCounter.day()) > -1\n    //         });\n    //         dayCounter.add(1, 'day');\n    //       }\n    //       var eventsSorted = events.filter(function(event) {\n    //         return eventIsInPeriod(event.startsAt, event.endsAt, startOfWeek, endOfWeek);\n    //       }).map(function(event) {\n    //         var eventStart = moment(event.startsAt).startOf('day');\n    //         var eventEnd = moment(event.endsAt).startOf('day');\n    //         var weekViewStart = moment(startOfWeek).startOf('day');\n    //         var weekViewEnd = moment(endOfWeek).startOf('day');\n    //         var offset, span;\n    //         if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n    //           offset = 0;\n    //         } else {\n    //           offset = eventStart.diff(weekViewStart, 'days');\n    //         }\n    //         if (eventEnd.isAfter(weekViewEnd)) {\n    //           eventEnd = weekViewEnd;\n    //         }\n    //         if (eventStart.isBefore(weekViewStart)) {\n    //           eventStart = weekViewStart;\n    //         }\n    //         span = moment(eventEnd).diff(eventStart, 'days') + 1;\n    //         event.daySpan = span;\n    //         event.dayOffset = offset;\n    //         return event;\n    //       });\n    //       return {days: days, events: eventsSorted};\n    //     }\n    //     function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n    //       var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n    //       var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n    //       var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n    //       var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n    //       var dayHeightMultiplier = dayHeight / 60;\n    //       var buckets = [];\n    //       return eventsInPeriod.filter(function(event) {\n    //         return eventIsInPeriod(\n    //           event.startsAt,\n    //           event.endsAt,\n    //           moment(currentDay).startOf('day').toDate(),\n    //           moment(currentDay).endOf('day').toDate()\n    //         );\n    //       }).map(function(event) {\n    //         if (moment(event.startsAt).isBefore(calendarStart)) {\n    //           event.top = 0;\n    //         } else {\n    //           event.top = (moment(event.startsAt).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier) - 2;\n    //         }\n    //         if (moment(event.endsAt).isAfter(calendarEnd)) {\n    //           event.height = calendarHeight - event.top;\n    //         } else {\n    //           var diffStart = event.startsAt;\n    //           if (moment(event.startsAt).isBefore(calendarStart)) {\n    //             diffStart = calendarStart.toDate();\n    //           }\n    //           event.height = moment(event.endsAt).diff(diffStart, 'minutes') * dayHeightMultiplier;\n    //         }\n    //         if (event.top - event.height > calendarHeight) {\n    //           event.height = 0;\n    //         }\n    //         event.left = 0;\n    //         return event;\n    //       }).filter(function(event) {\n    //         return event.height > 0;\n    //       }).map(function(event) {\n    //         var cannotFitInABucket = true;\n    //         buckets.forEach(function(bucket, bucketIndex) {\n    //           var canFitInThisBucket = true;\n    //           bucket.forEach(function(bucketItem) {\n    //             if (eventIsInPeriod(event.startsAt, event.endsAt, bucketItem.startsAt, bucketItem.endsAt) ||\n    //               eventIsInPeriod(bucketItem.startsAt, bucketItem.endsAt, event.startsAt, event.endsAt)) {\n    //               canFitInThisBucket = false;\n    //             }\n    //           });\n    //           if (canFitInThisBucket && cannotFitInABucket) {\n    //             cannotFitInABucket = false;\n    //             event.left = bucketIndex * 150;\n    //             buckets[bucketIndex].push(event);\n    //           }\n    //         });\n    //         if (cannotFitInABucket) {\n    //           event.left = buckets.length * 150;\n    //           buckets.push([event]);\n    //         }\n    //         return event;\n    //       });\n    //     }\n    //     return {\n    //       getWeekDayNames: getWeekDayNames,\n    //       getYearView: getYearView,\n    //       getMonthView: getMonthView,\n    //       getWeekView: getWeekView,\n    //       getDayView: getDayView\n    //     };\n    //   });\n    'use strict';\n    angular.module('mwl.calendar').service('calendarDebounce', [\n        '$timeout',\n        function ($timeout) {\n            function debounce(func, wait, immediate) {\n                var timeout;\n                return function () {\n                    var context = this, args = arguments;\n                    var later = function () {\n                        timeout = null;\n                        if (!immediate) {\n                            func.apply(context, args);\n                        }\n                    };\n                    var callNow = immediate && !timeout;\n                    $timeout.cancel(timeout);\n                    timeout = $timeout(later, wait);\n                    if (callNow) {\n                        func.apply(context, args);\n                    }\n                };\n            }\n            return debounce;\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').provider('calendarConfig', function () {\n        var defaultDateFormats = {\n            hour: 'ha',\n            day: 'D MMM',\n            month: 'MMMM',\n            // CUSTOMIZATION: change to dd for Sa Su Mo Tu We Th Fr\n            // weekDay: 'ddd'\n            weekDay: 'ddd'\n        };\n        var defaultTitleFormats = {\n            day: 'dddd D MMMM, YYYY',\n            week: 'Week {week} of {year}',\n            month: 'MMMM YYYY',\n            year: 'YYYY'\n        };\n        var i18nStrings = {\n            eventsLabel: 'Events',\n            timeLabel: 'Time'\n        };\n        var configProvider = this;\n        configProvider.setDateFormats = function (formats) {\n            angular.extend(defaultDateFormats, formats);\n            return configProvider;\n        };\n        configProvider.setTitleFormats = function (formats) {\n            angular.extend(defaultTitleFormats, formats);\n            return configProvider;\n        };\n        configProvider.setI18nStrings = function (strings) {\n            angular.extend(i18nStrings, strings);\n            return configProvider;\n        };\n        configProvider.$get = function () {\n            return {\n                dateFormats: defaultDateFormats,\n                titleFormats: defaultTitleFormats,\n                i18nStrings: i18nStrings\n            };\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarTruncateEventTitle', function () {\n        return function (string, length, boxHeight) {\n            if (!string) {\n                return '';\n            }\n            //Only truncate if if actually needs truncating\n            if (string.length >= length && string.length / 20 > boxHeight / 30) {\n                return string.substr(0, length) + '...';\n            } else {\n                return string;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarLimitTo', function () {\n        //Copied from the angular source. Only 1.4 has the begin functionality.\n        return function (input, limit, begin) {\n            if (Math.abs(Number(limit)) === Infinity) {\n                limit = Number(limit);\n            } else {\n                limit = parseInt(limit);\n            }\n            if (isNaN(limit)) {\n                return input;\n            }\n            if (angular.isNumber(input)) {\n                input = input.toString();\n            }\n            if (!angular.isArray(input) && !angular.isString(input)) {\n                return input;\n            }\n            begin = !begin || isNaN(begin) ? 0 : parseInt(begin);\n            begin = begin < 0 && begin >= -input.length ? input.length + begin : begin;\n            if (limit >= 0) {\n                return input.slice(begin, begin + limit);\n            } else {\n                if (begin === 0) {\n                    return input.slice(limit, input.length);\n                } else {\n                    return input.slice(Math.max(0, begin + limit), begin);\n                }\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlDateModifier', function () {\n        return {\n            restrict: 'A',\n            controller: [\n                '$element',\n                '$attrs',\n                '$scope',\n                'moment',\n                function ($element, $attrs, $scope, moment) {\n                    function onClick() {\n                        if (angular.isDefined($attrs.setToToday)) {\n                            $scope.date = new Date();\n                        } else if (angular.isDefined($attrs.increment)) {\n                            $scope.date = moment($scope.date).add(1, $scope.increment).toDate();\n                        } else if (angular.isDefined($attrs.decrement)) {\n                            $scope.date = moment($scope.date).subtract(1, $scope.decrement).toDate();\n                        }\n                        $scope.$apply();\n                    }\n                    $element.bind('click', onClick);\n                    $scope.$on('$destroy', function () {\n                        $element.unbind('click', onClick);\n                    });\n                }\n            ],\n            scope: {\n                date: '=',\n                increment: '=',\n                decrement: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCollapseFallback', [\n        '$injector',\n        function ($injector) {\n            if ($injector.has('collapseDirective')) {\n                return {};\n            }\n            return {\n                restrict: 'A',\n                controller: [\n                    '$scope',\n                    '$attrs',\n                    '$element',\n                    function ($scope, $attrs, $element) {\n                        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function (shouldCollapse) {\n                            if (shouldCollapse) {\n                                $element.addClass('ng-hide');\n                            } else {\n                                $element.removeClass('ng-hide');\n                            }\n                        });\n                        var unbindDestroy = $scope.$on('$destroy', function () {\n                            unbindDestroy();\n                            unbindWatcher();\n                        });\n                    }\n                ]\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarYear', function () {\n        return {\n            templateUrl: 'src/templates/calendarYearView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onEditEventClick: '=',\n                onDeleteEventClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                function ($scope, moment, calendarHelper) {\n                    var vm = this;\n                    var firstRun = true;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && firstRun) {\n                            firstRun = false;\n                            vm.view.forEach(function (month) {\n                                if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                                    vm.monthClicked(month, true);\n                                }\n                            });\n                        }\n                    });\n                    vm.monthClicked = function (month, monthClickedFirstRun) {\n                        if (!monthClickedFirstRun) {\n                            $scope.onTimespanClick({ calendarDate: month.date.toDate() });\n                        }\n                        vm.openEvents = month.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var monthIndex = vm.view.indexOf(month);\n                            vm.openRowIndex = Math.floor(monthIndex / 4);\n                        }\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarWeek', function () {\n        return {\n            templateUrl: 'src/templates/calendarWeekView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'calendarHelper',\n                function ($scope, calendarHelper) {\n                    var vm = this;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarSlideBox', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'src/templates/calendarSlideBox.html',\n            replace: true,\n            controller: [\n                '$scope',\n                '$sce',\n                function ($scope, $sce) {\n                    // customization\n                    // var pps = practitionerPageServices;\n                    // var cs = calendarServices;\n                    var vm = this;\n                    vm.$sce = $sce;\n                    var unbindWatcher = $scope.$watch('isOpen', function (isOpen) {\n                        vm.shouldCollapse = !isOpen;\n                    });\n                    var unbindDestroy = $scope.$on('$destroy', function () {\n                        unbindDestroy();\n                        unbindWatcher();\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            require: [\n                '^?mwlCalendarMonth',\n                '^?mwlCalendarYear'\n            ],\n            link: function (scope, elm, attrs, ctrls) {\n                scope.isMonthView = !!ctrls[0];\n                scope.isYearView = !!ctrls[1];\n            },\n            scope: {\n                isOpen: '=',\n                events: '=',\n                currentDay: '=',\n                unscheduledEvents: '=',\n                onEventClick: '=',\n                editEventHtml: '=',\n                onEditEventClick: '=',\n                deleteEventHtml: '=',\n                onDeleteEventClick: '='\n            }\n        };\n    });\n    // 'use strict';\n    // angular\n    //   .module('mwl.calendar')\n    //   .directive('mwlCalendarSlideBox', function() {\n    //     return {\n    //       restrict: 'EA',\n    //       templateUrl: 'src/templates/calendarSlideBox.html',\n    //       replace: true,\n    //       controller: function($scope, $sce) {\n    //         var vm = this;\n    //         vm.$sce = $sce;\n    //         var unbindWatcher = $scope.$watch('isOpen', function(isOpen) {\n    //           vm.shouldCollapse = !isOpen;\n    //         });\n    //         var unbindDestroy = $scope.$on('$destroy', function() {\n    //           unbindDestroy();\n    //           unbindWatcher();\n    //         });\n    //       },\n    //       controllerAs: 'vm',\n    //       require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n    //       link: function(scope, elm, attrs, ctrls) {\n    //         scope.isMonthView = !!ctrls[0];\n    //         scope.isYearView = !!ctrls[1];\n    //       },\n    //       scope: {\n    //         isOpen: '=',\n    //         events: '=',\n    //         onEventClick: '=',\n    //         editEventHtml: '=',\n    //         onEditEventClick: '=',\n    //         deleteEventHtml: '=',\n    //         onDeleteEventClick: '='\n    //       }\n    //     };\n    //   });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarMonth', function () {\n        return {\n            templateUrl: 'src/templates/calendarMonthView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                unscheduledEvents: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onEditEventClick: '=',\n                onDeleteEventClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                '$log',\n                function ($scope, moment, calendarHelper, $log) {\n                    var vm = this;\n                    var firstRun = true;\n                    ///////// CUSTOMIZATION\n                    // var pps = practitionerPageServices;\n                    // $scope.icons= pps.icons;\n                    // $scope.prettyName = pps.prettyName;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.weekDays = calendarHelper.getWeekDayNames();\n                        vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n                        var rows = Math.floor(vm.view.length / 7);\n                        vm.monthOffsets = [];\n                        for (var i = 0; i < rows; i++) {\n                            vm.monthOffsets.push(i * 7);\n                        }\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && firstRun) {\n                            firstRun = false;\n                            vm.view.forEach(function (day) {\n                                if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                                    vm.dayClicked(day, true);\n                                }\n                            });\n                        }\n                    });\n                    vm.dayClicked = function (day, dayClickedFirstRun) {\n                        if (!dayClickedFirstRun) {\n                            $scope.onTimespanClick({ calendarDate: day.date.toDate() });\n                        }\n                        vm.view.forEach(function (monthDay) {\n                            monthDay.isOpened = false;\n                        });\n                        vm.openEvents = day.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var dayIndex = vm.view.indexOf(day);\n                            vm.openRowIndex = Math.floor(dayIndex / 7);\n                            day.isOpened = true;\n                        }\n                    };\n                    vm.highlightEvent = function (event, shouldAddClass) {\n                        vm.view.forEach(function (day) {\n                            delete day.highlightClass;\n                            if (shouldAddClass) {\n                                var dayContainsEvent = day.events.indexOf(event) > -1;\n                                if (dayContainsEvent) {\n                                    day.highlightClass = 'day-highlight dh-event-' + event.type;\n                                }\n                            }\n                        });\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarDay', function () {\n        return {\n            templateUrl: 'src/templates/calendarDayView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'calendarConfig',\n                function ($scope, $timeout, moment, calendarHelper, calendarConfig) {\n                    var vm = this;\n                    var dayViewStart, dayViewEnd;\n                    vm.calendarConfig = calendarConfig;\n                    function updateDays() {\n                        dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n                        dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n                        vm.dayViewSplit = parseInt($scope.dayViewSplit);\n                        vm.dayHeight = 60 / $scope.dayViewSplit * 30;\n                        vm.days = [];\n                        var dayCounter = moment(dayViewStart);\n                        for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n                            vm.days.push({ label: dayCounter.format(calendarConfig.dateFormats.hour) });\n                            dayCounter.add(1, 'hour');\n                        }\n                    }\n                    var originalLocale = moment.locale();\n                    $scope.$on('calendar.refreshView', function () {\n                        if (originalLocale !== moment.locale()) {\n                            originalLocale = moment.locale();\n                            updateDays();\n                        }\n                        vm.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), vm.dayHeight);\n                    });\n                    updateDays();\n                }\n            ],\n            controllerAs: 'vm'\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendar', function () {\n        return {\n            templateUrl: 'src/templates/calendar.html',\n            restrict: 'EA',\n            scope: {\n                events: '=',\n                unscheduledEvents: '=',\n                view: '=',\n                viewTitle: '=',\n                currentDay: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onEventClick: '&',\n                onEditEventClick: '&',\n                onDeleteEventClick: '&',\n                onTimespanClick: '&',\n                onDrillDownClick: '&',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarTitle',\n                'calendarDebounce',\n                function ($scope, $timeout, moment, calendarTitle, calendarDebounce) {\n                    var vm = this;\n                    // CUSTOMIZATION: adding a day change function to the controller\n                    vm.changeDate = function (date) {\n                        // console.log(\"clicked day = \", moment(date).toDate());\n                        // console.log(\"currentDay before click = \", $scope.currentDay);\n                        $scope.currentDay = moment(date).toDate();\n                        console.log('currentDay after click = ', $scope.currentDay);\n                        $scope.listDate = moment(date).toDate();    // console.log(\"listDate is another variable that is set... just in case it messes anything up... = \", $scope.listDate);\n                    };\n                    vm.changeView = function (view, newDay) {\n                        $scope.view = view;\n                        $scope.currentDay = newDay;\n                    };\n                    vm.drillDown = function (date) {\n                        var nextView = {\n                            'year': 'month',\n                            'month': 'day',\n                            'week': 'day'\n                        };\n                        if ($scope.onDrillDownClick({\n                                calendarDate: moment(date).toDate(),\n                                calendarNextView: nextView[$scope.view]\n                            }) !== false) {\n                            vm.changeView(nextView[$scope.view], date);\n                        }\n                    };\n                    //Use a debounce to prevent it being called 3 times on initialisation\n                    var refreshCalendar = calendarDebounce(function () {\n                        if (calendarTitle[$scope.view]) {\n                            $scope.viewTitle = calendarTitle[$scope.view]($scope.currentDay);\n                        }\n                        $scope.$broadcast('calendar.refreshView');\n                    }, 50);\n                    //Auto update the calendar when the locale changes\n                    var unbindLocaleWatcher = $scope.$watch(function () {\n                        return moment.locale();\n                    }, refreshCalendar);\n                    var unbindOnDestroy = [];\n                    unbindOnDestroy.push(unbindLocaleWatcher);\n                    //Refresh the calendar when any of these variables change.\n                    unbindOnDestroy.push($scope.$watch('currentDay', refreshCalendar));\n                    unbindOnDestroy.push($scope.$watch('view', refreshCalendar));\n                    unbindOnDestroy.push($scope.$watch('events', refreshCalendar, true));\n                    //Remove any watchers when the calendar is destroyed\n                    var unbindDestroyListener = $scope.$on('$destroy', function () {\n                        unbindOnDestroy.forEach(function (unbind) {\n                            unbind();\n                        });\n                    });\n                    unbindOnDestroy.push(unbindDestroyListener);\n                }\n            ]\n        };\n    });\n}(window, angular));","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .constant('moment', window.moment);\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarTitle', function (moment, calendarConfig) {\n\n    function day(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.day);\n    }\n\n    function week(currentDay) {\n      var weekTitleLabel = calendarConfig.titleFormats.week;\n      return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n    }\n\n    function month(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.month);\n    }\n\n    function year(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.year);\n    }\n\n    return {\n      day: day,\n      week: week,\n      month: month,\n      year: year\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarHelper', function (moment, calendarConfig) {\n\n    // CUSTOMIZATION: change eventEnd to be the same as eventStart\n\n    function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n\n      eventStart = moment(eventStart);\n      eventEnd = moment(eventStart);\n      periodStart = moment(periodStart);\n      periodEnd = moment(periodEnd);\n\n      return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n        (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n        (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n        eventStart.isSame(periodStart) ||\n        eventEnd.isSame(periodEnd);\n\n    }\n\n    function getEventsInPeriod(calendarDate, period, allEvents) {\n      var startPeriod = moment(calendarDate).startOf(period);\n      var endPeriod = moment(calendarDate).endOf(period);\n      return allEvents.filter(function(event) {\n        return eventIsInPeriod(event.startsAt, event.startsAt, startPeriod, endPeriod);\n      });\n    }\n\n    function getBadgeTotal(events) {\n      return events.filter(function(event) {\n        return event.incrementsBadgeTotal !== false;\n      }).length;\n    }\n\n    function getWeekDayNames() {\n      var weekdays = [];\n      var count = 0;\n      while(count < 7) {\n        weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n      }\n      return weekdays;\n    }\n\n    function getYearView(events, currentDay) {\n\n      var view = [];\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n      var month = moment(currentDay).startOf('year');\n      var count = 0;\n      while (count < 12) {\n        var startPeriod = month.clone();\n        var endPeriod = startPeriod.clone().endOf('month');\n        var periodEvents = eventsInPeriod.filter(function(event) {\n          return eventIsInPeriod(event.startsAt, event.startsAt, startPeriod, endPeriod);\n        });\n        view.push({\n          label: startPeriod.format(calendarConfig.dateFormats.month),\n          isToday: startPeriod.isSame(moment().startOf('month')),\n          events: periodEvents,\n          date: startPeriod,\n          badgeTotal: getBadgeTotal(periodEvents)\n        });\n\n        month.add(1, 'month');\n        count++;\n      }\n\n      return view;\n\n    }\n\n    function getMonthView(events, currentDay, unscheduledEvents) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n      var startOfMonth = moment(currentDay).startOf('month');\n      var day = startOfMonth.clone().startOf('week');\n      var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n      var view = [];\n      var today = moment().startOf('day');\n      while (day.isBefore(endOfMonthView)) {\n\n        var inMonth = day.month() === moment(currentDay).month();\n        var monthEvents = [];\n        if (inMonth) {\n          monthEvents = eventsInPeriod.filter(function(event) {\n            return eventIsInPeriod(event.startsAt, event.startsAt, day, day.clone().endOf('day'));\n          });\n        }\n\n\n\n        view.push({\n          label: day.date(),\n          date: day.clone(),\n          inMonth: inMonth,\n          isPast: today.isAfter(day),\n          isToday: today.isSame(day),\n          isFuture: today.isBefore(day),\n          isWeekend: [0, 6].indexOf(day.day()) > -1,\n          events: monthEvents,\n          badgeTotal: getBadgeTotal(monthEvents)\n        });\n\n        day.add(1, 'day');\n      }\n\n      return view;\n\n    }\n\n    function getWeekView(events, currentDay) {\n\n      var startOfWeek = moment(currentDay).startOf('week');\n      var endOfWeek = moment(currentDay).endOf('week');\n      var dayCounter = startOfWeek.clone();\n      var days = [];\n      var today = moment().startOf('day');\n      while(days.length < 7) {\n        days.push({\n          weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n          date: dayCounter.clone(),\n          dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n          isPast: dayCounter.isBefore(today),\n          isToday: dayCounter.isSame(today),\n          isFuture: dayCounter.isAfter(today),\n          isWeekend: [0, 6].indexOf(dayCounter.day()) > -1\n        });\n        dayCounter.add(1, 'day');\n      }\n\n      var eventsSorted = events.filter(function(event) {\n        return eventIsInPeriod(event.startsAt, event.startsAt, startOfWeek, endOfWeek);\n      }).map(function(event) {\n\n        var eventStart = moment(event.startsAt).startOf('day');\n        var eventEnd = moment(event.startsAt).startOf('day');\n        var weekViewStart = moment(startOfWeek).startOf('day');\n        var weekViewEnd = moment(endOfWeek).startOf('day');\n        var offset, span;\n\n        if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n          offset = 0;\n        } else {\n          offset = eventStart.diff(weekViewStart, 'days');\n        }\n\n        if (eventEnd.isAfter(weekViewEnd)) {\n          eventEnd = weekViewEnd;\n        }\n\n        if (eventStart.isBefore(weekViewStart)) {\n          eventStart = weekViewStart;\n        }\n\n        span = moment(eventEnd).diff(eventStart, 'days') + 1;\n\n        event.daySpan = span;\n        event.dayOffset = offset;\n\n        return event;\n      });\n\n      return {days: days, events: eventsSorted};\n\n    }\n\n    function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n      var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n      var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n      var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n      var dayHeightMultiplier = dayHeight / 60;\n      var buckets = [];\n\n      return eventsInPeriod.filter(function(event) {\n        return eventIsInPeriod(\n          event.startsAt,\n          event.startsAt,\n          moment(currentDay).startOf('day').toDate(),\n          moment(currentDay).endOf('day').toDate()\n        );\n      }).map(function(event) {\n        if (moment(event.startsAt).isBefore(calendarStart)) {\n          event.top = 0;\n        } else {\n          event.top = (moment(event.startsAt).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier) - 2;\n        }\n\n        if (moment(event.startsAt).isAfter(calendarEnd)) {\n          event.height = calendarHeight - event.top;\n        } else {\n          var diffStart = event.startsAt;\n          if (moment(event.startsAt).isBefore(calendarStart)) {\n            diffStart = calendarStart.toDate();\n          }\n          event.height = moment(event.startsAt).diff(diffStart, 'minutes') * dayHeightMultiplier;\n        }\n\n        if (event.top - event.height > calendarHeight) {\n          event.height = 0;\n        }\n\n        event.left = 0;\n\n        return event;\n      }).filter(function(event) {\n        return event.height > 0;\n      }).map(function(event) {\n\n        var cannotFitInABucket = true;\n        buckets.forEach(function(bucket, bucketIndex) {\n          var canFitInThisBucket = true;\n\n          bucket.forEach(function(bucketItem) {\n            if (eventIsInPeriod(event.startsAt, event.startsAt, bucketItem.partParameters.startTime, bucketItem.endsAt) ||\n              eventIsInPeriod(bucketItem.partParameters.startTime, bucketItem.endsAt, event.startsAt, event.startsAt)) {\n              canFitInThisBucket = false;\n            }\n          });\n\n          if (canFitInThisBucket && cannotFitInABucket) {\n            cannotFitInABucket = false;\n            event.left = bucketIndex * 150;\n            buckets[bucketIndex].push(event);\n          }\n\n        });\n\n        if (cannotFitInABucket) {\n          event.left = buckets.length * 150;\n          buckets.push([event]);\n        }\n\n        return event;\n\n      });\n\n    }\n\n    return {\n      getWeekDayNames: getWeekDayNames,\n      getYearView: getYearView,\n      getMonthView: getMonthView,\n      getWeekView: getWeekView,\n      getDayView: getDayView\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .service('calendarDebounce', function($timeout) {\n\n    function debounce(func, wait, immediate) {\n      var timeout;\n      return function() {\n        var context = this, args = arguments;\n        var later = function() {\n          timeout = null;\n          if (!immediate) {\n            func.apply(context, args);\n          }\n        };\n        var callNow = immediate && !timeout;\n        $timeout.cancel(timeout);\n        timeout = $timeout(later, wait);\n        if (callNow) {\n          func.apply(context, args);\n        }\n      };\n    }\n\n    return debounce;\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .provider('calendarConfig', function() {\n\n    var defaultDateFormats = {\n      hour: 'ha',\n      day: 'D MMM',\n      month: 'MMMM',\n      // CUSTOMIZATION: change to dd for Sa Su Mo Tu We Th Fr\n      // weekDay: 'ddd'\n      weekDay: 'ddd'\n    };\n\n    var defaultTitleFormats = {\n      day: 'dddd D MMMM, YYYY',\n      week: 'Week {week} of {year}',\n      month: 'MMMM YYYY',\n      year: 'YYYY'\n    };\n\n    var i18nStrings = {\n      eventsLabel: 'Events',\n      timeLabel: 'Time'\n    };\n\n    var configProvider = this;\n\n    configProvider.setDateFormats = function(formats) {\n      angular.extend(defaultDateFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.setTitleFormats = function(formats) {\n      angular.extend(defaultTitleFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.setI18nStrings = function(strings) {\n      angular.extend(i18nStrings, strings);\n      return configProvider;\n    };\n\n    configProvider.$get = function() {\n      return {\n        dateFormats: defaultDateFormats,\n        titleFormats: defaultTitleFormats,\n        i18nStrings: i18nStrings\n      };\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarTruncateEventTitle', function() {\n\n    return function(string, length, boxHeight) {\n      if (!string) {\n        return '';\n      }\n\n      //Only truncate if if actually needs truncating\n      if (string.length >= length && string.length / 20 > boxHeight / 30) {\n        return string.substr(0, length) + '...';\n      } else {\n        return string;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarLimitTo', function() {\n\n    //Copied from the angular source. Only 1.4 has the begin functionality.\n    return function(input, limit, begin) {\n      if (Math.abs(Number(limit)) === Infinity) {\n        limit = Number(limit);\n      } else {\n        limit = parseInt(limit);\n      }\n      if (isNaN(limit)) {\n        return input;\n      }\n\n      if (angular.isNumber(input)) {\n        input = input.toString();\n      }\n      if (!angular.isArray(input) && !angular.isString(input)) {\n        return input;\n      }\n\n      begin = (!begin || isNaN(begin)) ? 0 : parseInt(begin);\n      begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;\n\n      if (limit >= 0) {\n        return input.slice(begin, begin + limit);\n      } else {\n        if (begin === 0) {\n          return input.slice(limit, input.length);\n        } else {\n          return input.slice(Math.max(0, begin + limit), begin);\n        }\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlDateModifier', function() {\n\n    return {\n      restrict: 'A',\n      controller: function($element, $attrs, $scope, moment) {\n\n        function onClick() {\n          if (angular.isDefined($attrs.setToToday)) {\n            $scope.date = new Date();\n          } else if (angular.isDefined($attrs.increment)) {\n            $scope.date = moment($scope.date).add(1, $scope.increment).toDate();\n          } else if (angular.isDefined($attrs.decrement)) {\n            $scope.date = moment($scope.date).subtract(1, $scope.decrement).toDate();\n          }\n          $scope.$apply();\n        }\n\n        $element.bind('click', onClick);\n\n        $scope.$on('$destroy', function() {\n          $element.unbind('click', onClick);\n        });\n\n      },\n      scope: {\n        date: '=',\n        increment: '=',\n        decrement: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCollapseFallback', function($injector) {\n\n    if ($injector.has('collapseDirective')) {\n      return {};\n    }\n\n    return {\n      restrict: 'A',\n      controller: function($scope, $attrs, $element) {\n        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function(shouldCollapse) {\n          if (shouldCollapse) {\n            $element.addClass('ng-hide');\n          } else {\n            $element.removeClass('ng-hide');\n          }\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarYear', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarYearView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onEditEventClick: '=',\n        onDeleteEventClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper) {\n\n        var vm = this;\n        var firstRun = true;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && firstRun) {\n            firstRun = false;\n            vm.view.forEach(function(month) {\n              if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                vm.monthClicked(month, true);\n              }\n            });\n          }\n        });\n\n        vm.monthClicked = function(month, monthClickedFirstRun) {\n\n          if (!monthClickedFirstRun) {\n            $scope.onTimespanClick({calendarDate: month.date.toDate()});\n          }\n\n          vm.openEvents = month.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var monthIndex = vm.view.indexOf(month);\n            vm.openRowIndex = Math.floor(monthIndex / 4);\n          }\n\n        };\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarWeek', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarWeekView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, calendarHelper) {\n\n        var vm = this;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n        });\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarSlideBox', function() {\n\n    return {\n      restrict: 'EA',\n      templateUrl: 'src/templates/calendarSlideBox.html',\n      replace: true,\n      controller: function($scope, $sce) {\n// customization\n        // var pps = practitionerPageServices;\n        // var cs = calendarServices;\n        var vm = this;\n        vm.$sce = $sce;\n\n        var unbindWatcher = $scope.$watch('isOpen', function(isOpen) {\n          vm.shouldCollapse = !isOpen;\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      },\n      controllerAs: 'vm',\n      require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n      link: function(scope, elm, attrs, ctrls) {\n        scope.isMonthView = !!ctrls[0];\n        scope.isYearView = !!ctrls[1];\n      },\n      scope: {\n        isOpen: '=',\n        events: '=',\n        currentDay: '=',\n        unscheduledEvents: '=',\n        onEventClick: '=',\n        editEventHtml: '=',\n        onEditEventClick: '=',\n        deleteEventHtml: '=',\n        onDeleteEventClick: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarMonth', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarMonthView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        unscheduledEvents: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onEditEventClick: '=',\n        onDeleteEventClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper, $log) {\n\n        var vm = this;\n        var firstRun = true;\n///////// CUSTOMIZATION\n        // var pps = practitionerPageServices;\n        // $scope.icons= pps.icons;\n        // $scope.prettyName = pps.prettyName;\n\n        \n\n        $scope.$on('calendar.refreshView', function() {\n          vm.weekDays = calendarHelper.getWeekDayNames();\n\n          vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n          var rows = Math.floor(vm.view.length / 7);\n          vm.monthOffsets = [];\n          for (var i = 0; i < rows; i++) {\n            vm.monthOffsets.push(i * 7);\n          }\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && firstRun) {\n            firstRun = false;\n            vm.view.forEach(function(day) {\n              if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                vm.dayClicked(day, true);\n              }\n            });\n          }\n        });\n\n        vm.dayClicked = function(day, dayClickedFirstRun) {\n\n          if (!dayClickedFirstRun) {\n            $scope.onTimespanClick({calendarDate: day.date.toDate()});\n          }\n\n          vm.view.forEach(function(monthDay) {\n            monthDay.isOpened = false;\n          });\n          vm.openEvents = day.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var dayIndex = vm.view.indexOf(day);\n            vm.openRowIndex = Math.floor(dayIndex / 7);\n            day.isOpened = true;\n          }\n\n        };\n\n        vm.highlightEvent = function(event, shouldAddClass) {\n\n          vm.view.forEach(function(day) {\n            delete day.highlightClass;\n            if (shouldAddClass) {\n              var dayContainsEvent = day.events.indexOf(event) > -1;\n              if (dayContainsEvent) {\n                day.highlightClass = 'day-highlight dh-event-' + event.type;\n              }\n            }\n          });\n\n        };\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarDay', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarDayView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        dayViewSplit: '@'\n      },\n      controller: function($scope, $timeout, moment, calendarHelper, calendarConfig) {\n\n        var vm = this;\n        var dayViewStart, dayViewEnd;\n\n        vm.calendarConfig = calendarConfig;\n\n        function updateDays() {\n          dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n          dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n          vm.dayViewSplit = parseInt($scope.dayViewSplit);\n          vm.dayHeight = (60 / $scope.dayViewSplit) * 30;\n          vm.days = [];\n          var dayCounter = moment(dayViewStart);\n          for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n            vm.days.push({\n              label: dayCounter.format(calendarConfig.dateFormats.hour)\n            });\n            dayCounter.add(1, 'hour');\n          }\n        }\n\n        var originalLocale = moment.locale();\n\n        $scope.$on('calendar.refreshView', function() {\n\n          if (originalLocale !== moment.locale()) {\n            originalLocale = moment.locale();\n            updateDays();\n          }\n\n          vm.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), vm.dayHeight);\n\n        });\n\n        updateDays();\n\n      },\n      controllerAs: 'vm'\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendar', function() {\n\n    return {\n      templateUrl: 'src/templates/calendar.html',\n      restrict: 'EA',\n      scope: {\n        events: '=',\n        unscheduledEvents: '=',\n        view: '=',\n        viewTitle: '=',\n        currentDay: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onEventClick: '&',\n        onEditEventClick: '&',\n        onDeleteEventClick: '&',\n        onTimespanClick: '&',\n        onDrillDownClick: '&',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        dayViewSplit: '@'\n      },\n      controller: function($scope, $timeout, moment, calendarTitle, calendarDebounce) {\n\n        var vm = this;\n\n// CUSTOMIZATION: adding a day change function to the controller\n        vm.changeDate = function (date) {\n          // console.log(\"clicked day = \", moment(date).toDate());\n          \n          // console.log(\"currentDay before click = \", $scope.currentDay);\n          $scope.currentDay = moment(date).toDate();\n          console.log(\"currentDay after click = \", $scope.currentDay);\n          \n          $scope.listDate = moment(date).toDate();\n          // console.log(\"listDate is another variable that is set... just in case it messes anything up... = \", $scope.listDate);\n        };\n\n        vm.changeView = function(view, newDay) {\n          $scope.view = view;\n          $scope.currentDay = newDay;\n        };\n\n        vm.drillDown = function(date) {\n\n          var nextView = {\n            'year': 'month',\n            'month': 'day',\n            'week': 'day'\n          };\n\n          if ($scope.onDrillDownClick({calendarDate: moment(date).toDate(), calendarNextView: nextView[$scope.view]}) !== false) {\n            vm.changeView(nextView[$scope.view], date);\n          }\n\n        };\n\n        //Use a debounce to prevent it being called 3 times on initialisation\n        var refreshCalendar = calendarDebounce(function() {\n          if (calendarTitle[$scope.view]) {\n            $scope.viewTitle = calendarTitle[$scope.view]($scope.currentDay);\n          }\n          $scope.$broadcast('calendar.refreshView');\n        }, 50);\n\n        //Auto update the calendar when the locale changes\n        var unbindLocaleWatcher = $scope.$watch(function() {\n          return moment.locale();\n        }, refreshCalendar);\n\n        var unbindOnDestroy = [];\n        unbindOnDestroy.push(unbindLocaleWatcher);\n\n        //Refresh the calendar when any of these variables change.\n        unbindOnDestroy.push($scope.$watch('currentDay', refreshCalendar));\n        unbindOnDestroy.push($scope.$watch('view', refreshCalendar));\n        unbindOnDestroy.push($scope.$watch('events', refreshCalendar, true));\n\n        //Remove any watchers when the calendar is destroyed\n        var unbindDestroyListener = $scope.$on('$destroy', function() {\n          unbindOnDestroy.forEach(function(unbind) {\n            unbind();\n          });\n        });\n        unbindOnDestroy.push(unbindDestroyListener);\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}